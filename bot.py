import asyncio
import aiohttp
import logging
import os
import json
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Set
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv
import pytz

load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@GroowAGarden")
SUPABASE_URL_BASE = os.getenv("SUPABASE_URL", "https://your-project.supabase.co/rest/v1")
SUPABASE_API_KEY = os.getenv("SUPABASE_KEY", "your-key")

AUTOSTOCKS_URL = f"{SUPABASE_URL_BASE}/user_autostocks_gag"

# API –∏–≥—Ä—ã
GAG_API_BASE = "https://gagapi.onrender.com"
SEEDS_API = f"{GAG_API_BASE}/seeds"
GEAR_API = f"{GAG_API_BASE}/gear"
COSMETICS_API = f"{GAG_API_BASE}/cosmetics"
EGGS_API = f"{GAG_API_BASE}/eggs"
WEATHER_API = f"{GAG_API_BASE}/weather"

CHECK_INTERVAL_MINUTES = 5
AUTOSTOCK_CACHE_TTL = 60

# –î–≤–∞ —Å–∞–º—ã—Ö —Ä–µ–¥–∫–∏—Ö —Å–µ–º–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
RAREST_SEEDS = ["Crimson Thorn", "Great Pumpkin"]

# ========== –î–ê–ù–ù–´–ï –ü–†–ï–î–ú–ï–¢–û–í ==========
SEEDS_DATA = {
    "Carrot": {"emoji": "ü•ï", "price": "10", "rarity": "1 in 1"},
    "Strawberry": {"emoji": "üçì", "price": "50", "rarity": "1 in 1"},
    "Blueberry": {"emoji": "ü´ê", "price": "400", "rarity": "1 in 1"},
    "Orange Tulip": {"emoji": "üß°", "price": "600", "rarity": "1 in 3"},
    "Tomato": {"emoji": "üçÖ", "price": "800", "rarity": "1 in 1"},
    "Corn": {"emoji": "üåΩ", "price": "1,300", "rarity": "1 in 6"},
    "Daffodil": {"emoji": "üåº", "price": "1,000", "rarity": "1 in 7"},
    "Watermelon": {"emoji": "üçâ", "price": "2,500", "rarity": "1 in 8"},
    "Pumpkin": {"emoji": "üéÉ", "price": "3,000", "rarity": "1 in 10"},
    "Apple": {"emoji": "üçé", "price": "3,250", "rarity": "1 in 14"},
    "Bamboo": {"emoji": "üéã", "price": "4,000", "rarity": "1 in 5"},
    "Coconut": {"emoji": "ü••", "price": "6,000", "rarity": "1 in 20"},
    "Cactus": {"emoji": "üåµ", "price": "15,000", "rarity": "1 in 30"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "50,000", "rarity": "1 in 50"},
    "Mango": {"emoji": "ü•≠", "price": "100,000", "rarity": "1 in 80"},
    "Grape": {"emoji": "üçá", "price": "850,000", "rarity": "1 in 100"},
    "Mushroom": {"emoji": "üçÑ", "price": "150,000", "rarity": "1 in 120"},
    "Pepper": {"emoji": "üå∂Ô∏è", "price": "1,000,000", "rarity": "1 in 140"},
    "Cacao": {"emoji": "üç´", "price": "2,500,000", "rarity": "1 in 160"},
    "Beanstalk": {"emoji": "ü™ú", "price": "10,000,000", "rarity": "1 in 210"},
    "Ember Lily": {"emoji": "üî•", "price": "15,000,000", "rarity": "1 in 240"},
    "Sugar Apple": {"emoji": "üçé", "price": "25,000,000", "rarity": "1 in 290"},
    "Burning Bud": {"emoji": "üî•", "price": "40,000,000", "rarity": "1 in 340"},
    "Giant Pinecone": {"emoji": "üå≤", "price": "55,000,000", "rarity": "1 in 380"},
    "Elder Strawberry": {"emoji": "üçì", "price": "70,000,000", "rarity": "1 in 400"},
    "Romanesco": {"emoji": "ü•¶", "price": "88,000,000", "rarity": "1 in 440"},
    "Crimson Thorn": {"emoji": "üåπ", "price": "10,000,000,000", "rarity": "1 in 777"},
    "Great Pumpkin": {"emoji": "üéÉ", "price": "15,000,000,000", "rarity": "LEGENDARY"},
}

GEAR_DATA = {
    "Watering Can": {"emoji": "üíß", "price": "50,000"},
    "Trowel": {"emoji": "üî®", "price": "100,000"},
    "Trading Ticket": {"emoji": "üé´", "price": "100,000"},
    "Recall Wrench": {"emoji": "üîß", "price": "150,000"},
    "Basic Sprinkler": {"emoji": "üí¶", "price": "25,000"},
    "Advanced Sprinkler": {"emoji": "üí¶", "price": "50,000"},
    "Medium Treat": {"emoji": "üçñ", "price": "4,000,000"},
    "Medium Toy": {"emoji": "üéÆ", "price": "4,000,000"},
    "Godly Sprinkler": {"emoji": "‚ú®", "price": "120,000"},
    "Magnifying Glass": {"emoji": "üîç", "price": "10,000,000"},
    "Master Sprinkler": {"emoji": "üëë", "price": "10,000,000"},
    "Cleaning Spray": {"emoji": "üßº", "price": "15,000,000"},
    "Favorite Tool": {"emoji": "‚≠ê", "price": "20,000,000"},
    "Harvest Tool": {"emoji": "‚úÇÔ∏è", "price": "30,000,000"},
    "Friendship Pot": {"emoji": "ü™¥", "price": "15,000,000"},
    "Level Up Lollipop": {"emoji": "üç≠", "price": "10,000,000,000"},
    "Grandmaster Sprinkler": {"emoji": "üèÜ", "price": "1,000,000,000"},
}

EGGS_DATA = {
    "Common Egg": {"emoji": "ü•ö", "price": "50,000"},
    "Uncommon Egg": {"emoji": "üü°", "price": "150,000"},
    "Rare Egg": {"emoji": "üîµ", "price": "600,000"},
    "Legendary Egg": {"emoji": "üíú", "price": "3,000,000"},
    "Mythical Egg": {"emoji": "üåà", "price": "8,000,000"},
    "Bug Egg": {"emoji": "üêõ", "price": "50,000,000"},
    "Jungle Egg": {"emoji": "ü¶ú", "price": "60,000,000"},
}

# ========== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ==========
user_autostocks_cache: Dict[int, Set[str]] = {}
user_autostocks_time: Dict[int, datetime] = {}
last_stock_state: Dict[str, int] = {}

# ========== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def get_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(pytz.timezone('Europe/Moscow'))

def format_moscow_time() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return get_moscow_time().strftime('%H:%M:%S')

class SupabaseDB:
    """–†–∞–±–æ—Ç–∞ —Å Supabase –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.headers = {
            "apikey": SUPABASE_API_KEY,
            "Authorization": f"Bearer {SUPABASE_API_KEY}",
            "Content-Type": "application/json",
            "Prefer": "return=minimal"
        }
    
    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=20, connect=10, sock_read=10)
            )
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def load_user_autostocks(self, user_id: int, use_cache: bool = True) -> Set[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (TTL 60 —Å–µ–∫)"""
        if use_cache and user_id in user_autostocks_cache:
            cache_time = user_autostocks_time.get(user_id)
            if cache_time:
                now = get_moscow_time()
                if (now - cache_time).total_seconds() < AUTOSTOCK_CACHE_TTL:
                    return user_autostocks_cache[user_id].copy()
        
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "select": "item_name"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    items_set = {item['item_name'] for item in data}
                    
                    user_autostocks_cache[user_id] = items_set
                    user_autostocks_time[user_id] = get_moscow_time()
                    
                    return items_set
                return set()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤: {e}")
            return set()
    
    async def save_user_autostock(self, user_id: int, item_name: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞"""
        if user_id not in user_autostocks_cache:
            user_autostocks_cache[user_id] = set()
        user_autostocks_cache[user_id].add(item_name)
        user_autostocks_time[user_id] = get_moscow_time()
        
        try:
            await self.init_session()
            data = {"user_id": user_id, "item_name": item_name}
            
            async with self.session.post(AUTOSTOCKS_URL, json=data, headers=self.headers, timeout=5) as response:
                return response.status in [200, 201]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    async def remove_user_autostock(self, user_id: int, item_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞"""
        if user_id in user_autostocks_cache:
            user_autostocks_cache[user_id].discard(item_name)
            user_autostocks_time[user_id] = get_moscow_time()
        
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "item_name": f"eq.{item_name}"}
            
            async with self.session.delete(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                return response.status in [200, 204]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def get_users_tracking_item(self, item_name: str) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç"""
        try:
            await self.init_session()
            params = {"item_name": f"eq.{item_name}", "select": "user_id"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    return [item['user_id'] for item in data]
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

class StockTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–∫–∞ –∏–≥—Ä—ã"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.db = SupabaseDB()
    
    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
        await self.db.close_session()
    
    async def fetch_api(self, url: str) -> Optional[List[Dict]]:
        """–ó–∞–ø—Ä–æ—Å –∫ API –∏–≥—Ä—ã"""
        try:
            await self.init_session()
            async with self.session.get(url, timeout=10) as response:
                if response.status == 200:
                    return await response.json()
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return None
    
    async def fetch_seeds(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —Å–µ–º—è–Ω"""
        return await self.fetch_api(SEEDS_API)
    
    async def fetch_gear(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ –≥–∏—Ä–∞"""
        return await self.fetch_api(GEAR_API)
    
    async def fetch_cosmetics(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏"""
        return await self.fetch_api(COSMETICS_API)
    
    async def fetch_eggs(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —è–∏—Ü"""
        return await self.fetch_api(EGGS_API)
    
    async def fetch_weather(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        return await self.fetch_api(WEATHER_API)

tracker = StockTracker()
db = SupabaseDB()

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome = (
        "üå± *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GAG Stock Tracker\\!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∫ —Å–µ–º—è–Ω, –≥–∏—Ä–∞, –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —è–∏—Ü\\.\n\n"
        "üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üå± /stock \\- –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "‚ú® /cosmetic \\- –ö–æ—Å–º–µ—Ç–∏–∫–∞\n"
        "üå§Ô∏è /weather \\- –ü–æ–≥–æ–¥–∞\n"
        "üîî /autostock \\- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏\n"
        "‚ùì /help \\- –°–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(welcome, parse_mode="MarkdownV2")

async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stock - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–∫–∞"""
    seeds = await tracker.fetch_seeds()
    gear = await tracker.fetch_gear()
    eggs = await tracker.fetch_eggs()
    
    current_time = format_moscow_time()
    message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"
    
    # –°–µ–º–µ–Ω–∞
    if seeds:
        message += "üå± *–°–ï–ú–ï–ù–ê:*\n"
        for item in seeds:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in SEEDS_DATA:
                data = SEEDS_DATA[name]
                message += f"{data['emoji']} *{name}* x{quantity}\n"
        message += "\n"
    else:
        message += "üå± *–°–ï–ú–ï–ù–ê:* _–ü—É—Å—Ç–æ_\n\n"
    
    # –ì–∏—Ä—ã
    if gear:
        message += "‚öîÔ∏è *–ì–ò–†–´:*\n"
        for item in gear:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in GEAR_DATA:
                data = GEAR_DATA[name]
                message += f"{data['emoji']} *{name}* x{quantity}\n"
        message += "\n"
    else:
        message += "‚öîÔ∏è *–ì–ò–†–´:* _–ü—É—Å—Ç–æ_\n\n"
    
    # –Ø–π—Ü–∞
    if eggs:
        message += "ü•ö *–Ø–ô–¶–ê:*\n"
        for item in eggs:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in EGGS_DATA:
                data = EGGS_DATA[name]
                message += f"{data['emoji']} *{name}* x{quantity}\n"
    else:
        message += "ü•ö *–Ø–ô–¶–ê:* _–ü—É—Å—Ç–æ_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def cosmetic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cosmetic - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏"""
    cosmetics = await tracker.fetch_cosmetics()
    current_time = format_moscow_time()
    
    message = "‚ú® *–°–¢–û–ö –ö–û–°–ú–ï–¢–ò–ö–ò*\n\n"
    
    if cosmetics:
        for item in cosmetics:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            message += f"üé® *{name}* x{quantity}\n"
    else:
        message += "_–ü—É—Å—Ç–æ_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weather - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–≥–æ–¥—ã"""
    weather = await tracker.fetch_weather()
    current_time = format_moscow_time()
    
    message = "üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n"
    
    if weather and isinstance(weather, list) and len(weather) > 0:
        weather_data = weather[0]
        current = weather_data.get('current', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        upcoming = weather_data.get('upcoming', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message += f"*–¢–µ–∫—É—â–∞—è:* {current}\n"
        message += f"*–°–ª–µ–¥—É—é—â–∞—è:* {upcoming}"
    else:
        message += "_–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /autostock - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏"""
    user_id = update.effective_user.id
    user_items = await db.load_user_autostocks(user_id, use_cache=True)
    current_time = format_moscow_time()
    
    message = "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
    
    if user_items:
        message += "üìã *–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:*\n"
        for item_name in sorted(user_items):
            if item_name in SEEDS_DATA:
                emoji = SEEDS_DATA[item_name]['emoji']
            elif item_name in GEAR_DATA:
                emoji = GEAR_DATA[item_name]['emoji']
            else:
                emoji = "üì¶"
            message += f"{emoji} {item_name}\n"
        message += "\n"
    else:
        message += "_–ü—É—Å—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ_\n\n"
    
    message += (
        "üìù *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/add\\_autostock –Ω–∞–∑–≤–∞–Ω–∏–µ - –î–æ–±–∞–≤–∏—Ç—å\n"
        "/remove\\_autostock –Ω–∞–∑–≤–∞–Ω–∏–µ - –£–¥–∞–ª–∏—Ç—å\n"
        "/list\\_autostock - –ú–æ–π —Å–ø–∏—Å–æ–∫\n\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "üì¢ –†–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª\n\n"
        f"üïí {current_time} –ú–°–ö"
    )
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def add_autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∞–≤—Ç–æ—Å—Ç–æ–∫"""
    user_id = update.effective_user.id
    current_time = format_moscow_time()
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
            f"–ü—Ä–∏–º–µ—Ä: /add\\_autostock Crimson Thorn\n\n"
            f"üïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    item_name = ' '.join(context.args)
    
    if item_name not in SEEDS_DATA and item_name not in GEAR_DATA:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            f"üïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    success = await db.save_user_autostock(user_id, item_name)
    
    if success:
        if item_name in SEEDS_DATA:
            info = SEEDS_DATA[item_name]
        else:
            info = GEAR_DATA[item_name]
        
        message = (
            f"‚úÖ *–î–û–ë–ê–í–õ–ï–ù–û –í –ê–í–¢–û–°–¢–û–ö*\n\n"
            f"{info['emoji']} *{item_name}*\n"
            f"–¶–µ–Ω–∞: {info['price']} ¬¢\n\n"
            f"üïí {current_time} –ú–°–ö"
        )
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏\n\nüïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )

async def remove_autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞"""
    user_id = update.effective_user.id
    current_time = format_moscow_time()
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
            f"–ü—Ä–∏–º–µ—Ä: /remove\\_autostock Crimson Thorn\n\n"
            f"üïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    item_name = ' '.join(context.args)
    success = await db.remove_user_autostock(user_id, item_name)
    
    if success:
        await update.message.reply_text(
            f"üóëÔ∏è *–£–î–ê–õ–ï–ù–û –ò–ó –ê–í–¢–û–°–¢–û–ö–ê*\n\n"
            f"*{item_name}* –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
            f"üïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏\n\nüïí {current_time} –ú–°–ö",
            parse_mode=ParseMode.MARKDOWN
        )

async def list_autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_items = await db.load_user_autostocks(user_id, use_cache=True)
    current_time = format_moscow_time()
    
    message = "üìã *–ú–û–ò –ê–í–¢–û–°–¢–û–ö–ò*\n\n"
    
    if not user_items:
        message += "_–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤_"
    else:
        for item_name in sorted(user_items):
            if item_name in SEEDS_DATA:
                info = SEEDS_DATA[item_name]
            elif item_name in GEAR_DATA:
                info = GEAR_DATA[item_name]
            else:
                info = {"emoji": "üì¶", "price": "Unknown"}
            message += f"{info['emoji']} *{item_name}* ({info['price']} ¬¢)\n"
        message += f"\n_–í—Å–µ–≥–æ: {len(user_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    current_time = format_moscow_time()
    help_text = (
        "‚ùì *–°–ü–†–ê–í–ö–ê*\n\n"
        "üìä *–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ–∫–∞:*\n"
        "/stock - –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "/cosmetic - –ö–æ—Å–º–µ—Ç–∏–∫–∞\n"
        "/weather - –ü–æ–≥–æ–¥–∞\n\n"
        "üîî *–ê–≤—Ç–æ—Å—Ç–æ–∫–∏:*\n"
        "/autostock - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/add\\_autostock –Ω–∞–∑–≤–∞–Ω–∏–µ - –î–æ–±–∞–≤–∏—Ç—å\n"
        "/remove\\_autostock –Ω–∞–∑–≤–∞–Ω–∏–µ - –£–¥–∞–ª–∏—Ç—å\n"
        "/list\\_autostock - –ú–æ–π —Å–ø–∏—Å–æ–∫\n\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
        "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: @GroowAGarden\n"
        f"üì¢ –õ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞\n\n"
        f"üïí {current_time} –ú–°–ö"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

# ========== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–û–ö–ê ==========

async def stock_check(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global last_stock_state
    
    try:
        now = get_moscow_time()
        current_time = format_moscow_time()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∫–∞ - {current_time}")
        
        seeds = await tracker.fetch_seeds()
        
        if not seeds:
            return
        
        current_stock = {item['name']: item['quantity'] for item in seeds}
        
        # ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ö–ê–ù–ê–õ (—Ç–æ–ª—å–∫–æ 2 —Ä–µ–¥–∫–∏—Ö —Å–µ–º–µ–Ω–∞) =====
        for item_name in RAREST_SEEDS:
            current_count = current_stock.get(item_name, 0)
            previous_count = last_stock_state.get(item_name, 0)
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
            if current_count > 0 and previous_count == 0:
                if item_name in SEEDS_DATA:
                    info = SEEDS_DATA[item_name]
                    message = (
                        f"üö® *–†–ï–î–ö–ò–ô –ü–†–ï–î–ú–ï–¢ –í –°–¢–û–ö–ï\\!* üö®\n\n"
                        f"{info['emoji']} *{item_name}*\n"
                        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{current_count}*\n"
                        f"üí∞ –¶–µ–Ω–∞: {info['price']} ¬¢\n"
                        f"‚ö° –†–µ–¥–∫–æ—Å—Ç—å: {info['rarity']}\n\n"
                        f"üïí {current_time} –ú–°–ö"
                    )
                    try:
                        await context.bot.send_message(
                            chat_id=CHANNEL_ID,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN
                        )
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {item_name} x{current_count}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        
        # ===== –õ–ò–ß–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–∞–≤—Ç–æ—Å—Ç–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) =====
        for item_name, count in current_stock.items():
            previous_count = last_stock_state.get(item_name, 0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏–ª—Å—è
            if count > 0 and previous_count == 0:
                users = await db.get_users_tracking_item(item_name)
                for user_id in users:
                    try:
                        if item_name in SEEDS_DATA:
                            info = SEEDS_DATA[item_name]
                        elif item_name in GEAR_DATA:
                            info = GEAR_DATA[item_name]
                        else:
                            info = {"emoji": "üì¶", "price": "Unknown"}
                        
                        message = (
                            f"üîî *–ê–í–¢–û–°–¢–û–ö - –ü–†–ï–î–ú–ï–¢ –ü–û–Ø–í–ò–õ–°–Ø\\!*\n\n"
                            f"{info['emoji']} *{item_name}*\n"
                            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *x{count}*\n"
                            f"üí∞ –¶–µ–Ω–∞: {info['price']} ¬¢\n\n"
                            f"üïí {current_time} –ú–°–ö"
                        )
                        
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–∫–∞
        last_stock_state = current_stock.copy()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ stock_check: {e}")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    logger.info("="*60)
    logger.info("üå± GAG Stock Tracker Bot (Telegram)")
    logger.info("="*60)
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {CHANNEL_ID}")
    logger.info(f"üîî –†–µ–¥–∫–∏–µ —Å–µ–º–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {', '.join(RAREST_SEEDS)}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("stock", stock_command))
    application.add_handler(CommandHandler("cosmetic", cosmetic_command))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("autostock", autostock_command))
    application.add_handler(CommandHandler("add_autostock", add_autostock_command))
    application.add_handler(CommandHandler("remove_autostock", remove_autostock_command))
    application.add_handler(CommandHandler("list_autostock", list_autostock_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–∫–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    job_queue = application.job_queue
    job_queue.run_repeating(
        stock_check, 
        interval=CHECK_INTERVAL_MINUTES * 60,  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        first=5  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (run_polling —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=None, drop_pending_updates=True)

if __name__ == "__main__":
    main()