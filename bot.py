```python
# bot.py
import os
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("API_KEY")

# Supabase REST endpoint Arcaiuz
BASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/growagarden_stock"
HEADERS = {
    "apikey": API_KEY,
    "Authorization": f"Bearer {API_KEY}"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORY_EMOJI = {
    "seeds_stock":    "üå±",
    "cosmetic_stock": "üíé",
    "gear_stock":     "üß∞",
    "egg_stock":      "ü•ö",
    "weather":        "‚òÅÔ∏è"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_EMOJI = {
    # Seeds
    "Feijoa": "ü•ù", "Kiwi": "ü•ù", "Avocado": "ü•ë", "Sugar Apple": "üçè", "Tomato": "üçÖ",
    "Bell Pepper": "üå∂Ô∏è", "Pitcher Plant": "üå±", "Prickly Pear": "üåµ", "Cauliflower": "ü•¶",
    "Blueberry": "ü´ê", "Carrot": "ü•ï", "Loquat": "üçë", "Green Apple": "üçè", "Strawberry": "üçì",
    "Watermelon": "üçâ", "Banana": "üçå", "Rafflesia": "üå∫", "Pineapple": "üçç",
    # Cosmetic
    "Green Tractor": "üöú", "Large Wood Flooring": "ü™µ", "Sign Crate": "üì¶", "Small Wood Table": "ü™ë",
    "Large Path Tile": "üõ§Ô∏è", "Medium Path Tile": "‚¨õ", "Wood Fence": "ü™µ", "Axe Stump": "ü™®", "Shovel": "ü™ì",
    # Gear
    "Advanced Sprinkler": "üí¶", "Master Sprinkler": "üíß", "Basic Sprinkler": "üå¶Ô∏è", "Godly Sprinkler": "‚ö°",
    "Trowel": "‚õèÔ∏è", "Harvest Tool": "üß≤", "Cleaning Spray": "üß¥", "Recall Wrench": "üîß",
    "Favorite Tool": "‚ù§Ô∏è", "Watering Can": "üöø", "Magnifying Glass": "üîç", "Tanning Mirror": "ü™û", "Friendship Pot": "üåª",
    # Eggs
    "Common Egg": "ü•ö", "Common Summer Egg": "‚òÄÔ∏èü•ö", "Paradise Egg": "üê£",
    # Weather
    # (handled separately)
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∫–∞ –ø–æ —Ç–∏–ø—É
def fetch_stock(stock_type: str):
    params = {
        "select": "*",
        "type": f"eq.{stock_type}",
        "active": "eq.true",
        "order": "created_at.desc"
    }
    resp = requests.get(BASE_URL, headers=HEADERS, params=params)
    return resp.json() if resp.ok else []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
def fetch_weather():
    params = {
        "select": "*",
        "type": "eq.weather",
        "active": "eq.true",
        "order": "date.desc",
        "limit": 1
    }
    resp = requests.get(BASE_URL, headers=HEADERS, params=params)
    return resp.json() if resp.ok else []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å—Ç–æ–∫–∞
def format_block(title: str, emoji: str, items: list) -> str:
    if not items:
        return ""
    header = title.replace("_", " ").title().replace(" Stock", "")
    text = f"**‚îÅ {emoji} {header} Stock ‚îÅ**\n"
    for it in items:
        name = it.get("display_name", "Unknown")
        qty  = it.get("multiplier", 0)
        em   = ITEM_EMOJI.get(name, "‚Ä¢")
        text += f"   {em} {name}: x{qty}\n"
    return text + "\n"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
from zoneinfo import ZoneInfo

def format_weather(item: dict) -> str:
    if not item:
        return "**‚òÅÔ∏è Weather –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**"
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É UTC –∏–∑ API –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MSK
    iso_date = item.get("date")
    try:
        dt_utc = datetime.fromisoformat(iso_date.replace("Z", "+00:00"))
        dt_msk = dt_utc.astimezone(ZoneInfo("Europe/Moscow"))
        time_msk = dt_msk.strftime("%d.%m.%Y %H:%M:%S MSK")
    except Exception:
        time_msk = iso_date
    desc = item.get("display_name", "?")
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    lines = [
        "**‚îÅ ‚òÅÔ∏è Weather ‚îÅ**",
        f"   üïí {time_msk}",
        f"   üå°Ô∏è {desc}"
    ]
return "\n".join(lines)