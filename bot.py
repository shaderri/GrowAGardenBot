import asyncio
import aiohttp
import logging
import os
import json
import threading
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Set
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from dotenv import load_dotenv
from flask import Flask
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@GroowAGarden")
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://tcsmfiixhflzrxkrbslk.supabase.co")
SUPABASE_API_KEY = os.getenv("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRjc21maWl4aGZsenJ4a3Jic2xrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA1MDUzOTYsImV4cCI6MjA3NjA4MTM5Nn0.VcAK7QYvUFuKd96OgOdadS2s_9N08pYt9mMIu73Jeiw")

AUTOSTOCKS_URL = f"{SUPABASE_URL}/rest/v1/user_autostocks"

# API –∏–≥—Ä—ã
GAG_API_BASE = "https://gagapi.onrender.com"
SEEDS_API = f"{GAG_API_BASE}/seeds"
GEAR_API = f"{GAG_API_BASE}/gear"
COSMETICS_API = f"{GAG_API_BASE}/cosmetics"
EGGS_API = f"{GAG_API_BASE}/eggs"
WEATHER_API = f"{GAG_API_BASE}/weather"

CHECK_INTERVAL_MINUTES = 5
AUTOSTOCK_CACHE_TTL = 60

# –î–≤–∞ —Å–∞–º—ã—Ö —Ä–µ–¥–∫–∏—Ö —Å–µ–º–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
RAREST_SEEDS = ["Crimson Thorn", "Great Pumpkin"]

# ========== –î–ê–ù–ù–´–ï –ü–†–ï–î–ú–ï–¢–û–í ==========
SEEDS_DATA = {
    "Carrot": {"emoji": "ü•ï", "price": "10"},
    "Strawberry": {"emoji": "üçì", "price": "50"},
    "Blueberry": {"emoji": "ü´ê", "price": "400"},
    "Orange Tulip": {"emoji": "üß°", "price": "600"},
    "Tomato": {"emoji": "üçÖ", "price": "800"},
    "Corn": {"emoji": "üåΩ", "price": "1,300"},
    "Daffodil": {"emoji": "üåº", "price": "1,000"},
    "Watermelon": {"emoji": "üçâ", "price": "2,500"},
    "Pumpkin": {"emoji": "üéÉ", "price": "3,000"},
    "Apple": {"emoji": "üçé", "price": "3,250"},
    "Bamboo": {"emoji": "üéã", "price": "4,000"},
    "Coconut": {"emoji": "ü••", "price": "6,000"},
    "Cactus": {"emoji": "üåµ", "price": "15,000"},
    "Dragon Fruit": {"emoji": "üêâ", "price": "50,000"},
    "Mango": {"emoji": "ü•≠", "price": "100,000"},
    "Grape": {"emoji": "üçá", "price": "850,000"},
    "Mushroom": {"emoji": "üçÑ", "price": "150,000"},
    "Pepper": {"emoji": "üå∂Ô∏è", "price": "1,000,000"},
    "Cacao": {"emoji": "üç´", "price": "2,500,000"},
    "Beanstalk": {"emoji": "ü™ú", "price": "10,000,000"},
    "Ember Lily": {"emoji": "üî•", "price": "15,000,000"},
    "Sugar Apple": {"emoji": "üçé", "price": "25,000,000"},
    "Burning Bud": {"emoji": "üî•", "price": "40,000,000"},
    "Giant Pinecone": {"emoji": "üå≤", "price": "55,000,000"},
    "Elder Strawberry": {"emoji": "üçì", "price": "70,000,000"},
    "Romanesco": {"emoji": "ü•¶", "price": "88,000,000"},
    "Crimson Thorn": {"emoji": "üåπ", "price": "10,000,000,000"},
    "Great Pumpkin": {"emoji": "üéÉ", "price": "15,000,000,000"},
}

GEAR_DATA = {
    "Watering Can": {"emoji": "üíß", "price": "50,000"},
    "Trowel": {"emoji": "üî®", "price": "100,000"},
    "Trading Ticket": {"emoji": "üé´", "price": "100,000"},
    "Recall Wrench": {"emoji": "üîß", "price": "150,000"},
    "Basic Sprinkler": {"emoji": "üí¶", "price": "25,000"},
    "Advanced Sprinkler": {"emoji": "üí¶", "price": "50,000"},
    "Medium Treat": {"emoji": "üçñ", "price": "4,000,000"},
    "Medium Toy": {"emoji": "üéÆ", "price": "4,000,000"},
    "Godly Sprinkler": {"emoji": "‚ú®", "price": "120,000"},
    "Magnifying Glass": {"emoji": "üîç", "price": "10,000,000"},
    "Master Sprinkler": {"emoji": "üëë", "price": "10,000,000"},
    "Cleaning Spray": {"emoji": "üßº", "price": "15,000,000"},
    "Favorite Tool": {"emoji": "‚≠ê", "price": "20,000,000"},
    "Harvest Tool": {"emoji": "‚úÇÔ∏è", "price": "30,000,000"},
    "Friendship Pot": {"emoji": "ü™¥", "price": "15,000,000"},
    "Level Up Lollipop": {"emoji": "üç≠", "price": "10,000,000,000"},
    "Grandmaster Sprinkler": {"emoji": "üèÜ", "price": "1,000,000,000"},
}

EGGS_DATA = {
    "Common Egg": {"emoji": "ü•ö", "price": "50,000"},
    "Uncommon Egg": {"emoji": "üü°", "price": "150,000"},
    "Rare Egg": {"emoji": "üîµ", "price": "600,000"},
    "Legendary Egg": {"emoji": "üíú", "price": "3,000,000"},
    "Mythical Egg": {"emoji": "üåà", "price": "8,000,000"},
    "Bug Egg": {"emoji": "üêõ", "price": "50,000,000"},
    "Jungle Egg": {"emoji": "ü¶ú", "price": "60,000,000"},
}

# ========== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ==========
user_autostocks_cache: Dict[int, Set[str]] = {}
user_autostocks_time: Dict[int, datetime] = {}
last_stock_state: Dict[str, int] = {}

# ========== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== FLASK –î–õ–Ø UPTIME ROBOT ==========
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Bot is running!", 200

@flask_app.route('/health')
def health():
    return "OK", 200

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    flask_app.run(host='0.0.0.0', port=port)

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def get_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(pytz.timezone('Europe/Moscow'))

def format_moscow_time() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return get_moscow_time().strftime('%H:%M:%S')

class SupabaseDB:
    """–†–∞–±–æ—Ç–∞ —Å Supabase –¥–ª—è –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.headers = {
            "apikey": SUPABASE_API_KEY,
            "Authorization": f"Bearer {SUPABASE_API_KEY}",
            "Content-Type": "application/json",
            "Prefer": "return=minimal"
        }
    
    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=20, connect=10, sock_read=10)
            )
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
    
    async def load_user_autostocks(self, user_id: int, use_cache: bool = True) -> Set[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (TTL 60 —Å–µ–∫)"""
        if use_cache and user_id in user_autostocks_cache:
            cache_time = user_autostocks_time.get(user_id)
            if cache_time:
                now = get_moscow_time()
                if (now - cache_time).total_seconds() < AUTOSTOCK_CACHE_TTL:
                    return user_autostocks_cache[user_id].copy()
        
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "select": "item_name"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    items_set = {item['item_name'] for item in data}
                    
                    user_autostocks_cache[user_id] = items_set
                    user_autostocks_time[user_id] = get_moscow_time()
                    
                    return items_set
                return set()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤: {e}")
            return set()
    
    async def save_user_autostock(self, user_id: int, item_name: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞"""
        if user_id not in user_autostocks_cache:
            user_autostocks_cache[user_id] = set()
        user_autostocks_cache[user_id].add(item_name)
        user_autostocks_time[user_id] = get_moscow_time()
        
        try:
            await self.init_session()
            data = {"user_id": user_id, "item_name": item_name}
            
            async with self.session.post(AUTOSTOCKS_URL, json=data, headers=self.headers, timeout=5) as response:
                return response.status in [200, 201]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    async def remove_user_autostock(self, user_id: int, item_name: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞"""
        if user_id in user_autostocks_cache:
            user_autostocks_cache[user_id].discard(item_name)
            user_autostocks_time[user_id] = get_moscow_time()
        
        try:
            await self.init_session()
            params = {"user_id": f"eq.{user_id}", "item_name": f"eq.{item_name}"}
            
            async with self.session.delete(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                return response.status in [200, 204]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def get_users_tracking_item(self, item_name: str) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç"""
        try:
            await self.init_session()
            params = {"item_name": f"eq.{item_name}", "select": "user_id"}
            
            async with self.session.get(AUTOSTOCKS_URL, headers=self.headers, params=params, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    return [item['user_id'] for item in data]
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

class StockTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–∫–∞ –∏–≥—Ä—ã"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.db = SupabaseDB()
    
    async def init_session(self):
        if not self.session or self.session.closed:
            self.session = aiohttp.ClientSession()
    
    async def close_session(self):
        if self.session and not self.session.closed:
            await self.session.close()
        await self.db.close_session()
    
    async def fetch_api(self, url: str) -> Optional[List[Dict]]:
        """–ó–∞–ø—Ä–æ—Å –∫ API –∏–≥—Ä—ã"""
        try:
            await self.init_session()
            async with self.session.get(url, timeout=10) as response:
                if response.status == 200:
                    return await response.json()
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return None
    
    async def fetch_seeds(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —Å–µ–º—è–Ω"""
        return await self.fetch_api(SEEDS_API)
    
    async def fetch_gear(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ –≥–∏—Ä–∞"""
        return await self.fetch_api(GEAR_API)
    
    async def fetch_cosmetics(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏"""
        return await self.fetch_api(COSMETICS_API)
    
    async def fetch_eggs(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —è–∏—Ü"""
        return await self.fetch_api(EGGS_API)
    
    async def fetch_weather(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        try:
            await self.init_session()
            async with self.session.get(WEATHER_API, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                    return data
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ–≥–æ–¥—ã: {e}")
            return None

tracker = StockTracker()
db = SupabaseDB()

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome = (
        "üå± *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GAG Stock Tracker\\!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–æ–∫ —Å–µ–º—è–Ω, –≥–∏—Ä–∞, –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —è–∏—Ü\\.\n\n"
        "üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üå± /stock \\- –¢–µ–∫—É—â–∏–π —Å—Ç–æ–∫\n"
        "‚ú® /cosmetic \\- –ö–æ—Å–º–µ—Ç–∏–∫–∞\n"
        "üå§Ô∏è /weather \\- –ü–æ–≥–æ–¥–∞\n"
        "üîî /autostock \\- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏\n"
        "‚ùì /help \\- –°–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(welcome, parse_mode="MarkdownV2")

async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stock - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–∫–∞"""
    seeds = await tracker.fetch_seeds()
    gear = await tracker.fetch_gear()
    eggs = await tracker.fetch_eggs()
    
    current_time = format_moscow_time()
    message = "üìä *–¢–ï–ö–£–©–ò–ô –°–¢–û–ö*\n\n"
    
    # –°–µ–º–µ–Ω–∞
    if seeds:
        message += "üå± *–°–ï–ú–ï–ù–ê:*\n"
        for item in seeds:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in SEEDS_DATA:
                data = SEEDS_DATA[name]
                message += f"{data['emoji']} {name} x{quantity}\n"
        message += "\n"
    else:
        message += "üå± *–°–ï–ú–ï–ù–ê:* _–ü—É—Å—Ç–æ_\n\n"
    
    # –ì–∏—Ä—ã
    if gear:
        message += "‚öîÔ∏è *–ì–ò–†–´:*\n"
        for item in gear:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in GEAR_DATA:
                data = GEAR_DATA[name]
                message += f"{data['emoji']} {name} x{quantity}\n"
        message += "\n"
    else:
        message += "‚öîÔ∏è *–ì–ò–†–´:* _–ü—É—Å—Ç–æ_\n\n"
    
    # –Ø–π—Ü–∞
    if eggs:
        message += "ü•ö *–Ø–ô–¶–ê:*\n"
        for item in eggs:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            if name in EGGS_DATA:
                data = EGGS_DATA[name]
                message += f"{data['emoji']} {name} x{quantity}\n"
    else:
        message += "ü•ö *–Ø–ô–¶–ê:* _–ü—É—Å—Ç–æ_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def cosmetic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cosmetic - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏"""
    cosmetics = await tracker.fetch_cosmetics()
    current_time = format_moscow_time()
    
    message = "‚ú® *–°–¢–û–ö –ö–û–°–ú–ï–¢–ò–ö–ò*\n\n"
    
    if cosmetics:
        for item in cosmetics:
            name = item.get('name', '')
            quantity = item.get('quantity', 0)
            message += f"üé® {name} x{quantity}\n"
    else:
        message += "_–ü—É—Å—Ç–æ_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /weather - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–≥–æ–¥—ã"""
    weather = await tracker.fetch_weather()
    current_time = format_moscow_time()
    
    message = "üå§Ô∏è *–ü–û–ì–û–î–ê –í –ò–ì–†–ï*\n\n"
    
    if weather and isinstance(weather, dict):
        current = weather.get('current', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        upcoming = weather.get('upcoming', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message += f"–¢–µ–∫—É—â–∞—è: {current}\n"
        message += f"–°–ª–µ–¥—É—é—â–∞—è: {upcoming}"
    else:
        message += "_–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã_"
    
    message += f"\n\nüïí {current_time} –ú–°–ö"
    
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def autostock_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /autostock - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞–º–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.effective_user.id
    user_items = await db.load_user_autostocks(user_id, use_cache=False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–µ–º—è–Ω
    keyboard = []
    for name, data in sorted(SEEDS_DATA.items()):
        is_selected = name in user_items
        symbol = "‚úÖ" if is_selected else "‚ûï"
        keyboard.append([InlineKeyboardButton(
            f"{symbol} {data['emoji']} {name}",
            callback_data=f"autostock_seed_{name}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –≥–∏—Ä—ã
    keyboard.append([InlineKeyboardButton("‚öîÔ∏è –ì–ò–†–´ ‚Üí", callback_data="autostock_show_gear")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = (
        "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
        "üå± *–°–ï–ú–ï–ù–ê*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
        "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
        "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
    )
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

async def autostock_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Å—Ç–æ–∫–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "autostock_show_gear":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Ä—ã
        user_items = await db.load_user_autostocks(user_id, use_cache=False)
        keyboard = []
        for name, gear_data in sorted(GEAR_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {gear_data['emoji']} {name}",
                callback_data=f"autostock_gear_{name}"
            )])
        
        keyboard.append([InlineKeyboardButton("ü•ö –Ø–ô–¶–ê ‚Üí", callback_data="autostock_show_eggs")])
        keyboard.append([InlineKeyboardButton("‚Üê üå± –°–ï–ú–ï–ù–ê", callback_data="autostock_show_seeds")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "‚öîÔ∏è *–ì–ò–†–´*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif data == "autostock_show_eggs":
        # –ü–æ–∫–∞–∑–∞—Ç—å —è–π—Ü–∞
        user_items = await db.load_user_autostocks(user_id, use_cache=False)
        keyboard = []
        for name, egg_data in sorted(EGGS_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {egg_data['emoji']} {name}",
                callback_data=f"autostock_egg_{name}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚Üê ‚öîÔ∏è –ì–ò–†–´", callback_data="autostock_show_gear")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "ü•ö *–Ø–ô–¶–ê*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif data == "autostock_show_seeds":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–º–µ–Ω–∞
        user_items = await db.load_user_autostocks(user_id, use_cache=False)
        keyboard = []
        for name, seed_data in sorted(SEEDS_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {seed_data['emoji']} {name}",
                callback_data=f"autostock_seed_{name}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚öîÔ∏è –ì–ò–†–´ ‚Üí", callback_data="autostock_show_gear")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "üå± *–°–ï–ú–ï–ù–ê*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    elif data.startswith("autostock_seed_"):
        item_name = data.replace("autostock_seed_", "")
        await toggle_autostock(query, user_id, item_name, "seed")
    
    elif data.startswith("autostock_gear_"):
        item_name = data.replace("autostock_gear_", "")
        await toggle_autostock(query, user_id, item_name, "gear")
    
    elif data.startswith("autostock_egg_"):
        item_name = data.replace("autostock_egg_", "")
        await toggle_autostock(query, user_id, item_name, "egg")

async def toggle_autostock(query, user_id: int, item_name: str, item_type: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å—Ç–æ–∫–∞ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)"""
    user_items = await db.load_user_autostocks(user_id, use_cache=False)
    
    if item_name in user_items:
        # –£–¥–∞–ª–∏—Ç—å
        await db.remove_user_autostock(user_id, item_name)
    else:
        # –î–æ–±–∞–≤–∏—Ç—å
        await db.save_user_autostock(user_id, item_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    user_items = await db.load_user_autostocks(user_id, use_cache=False)
    
    if item_type == "seed":
        keyboard = []
        for name, data in sorted(SEEDS_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {data['emoji']} {name}",
                callback_data=f"autostock_seed_{name}"
            )])
        keyboard.append([InlineKeyboardButton("‚öîÔ∏è –ì–ò–†–´ ‚Üí", callback_data="autostock_show_gear")])
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "üå± *–°–ï–ú–ï–ù–ê*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )
    elif item_type == "gear":
        keyboard = []
        for name, data in sorted(GEAR_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {data['emoji']} {name}",
                callback_data=f"autostock_gear_{name}"
            )])
        keyboard.append([InlineKeyboardButton("ü•ö –Ø–ô–¶–ê ‚Üí", callback_data="autostock_show_eggs")])
        keyboard.append([InlineKeyboardButton("‚Üê üå± –°–ï–ú–ï–ù–ê", callback_data="autostock_show_seeds")])
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "‚öîÔ∏è *–ì–ò–†–´*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )
    else:  # egg
        keyboard = []
        for name, data in sorted(EGGS_DATA.items()):
            is_selected = name in user_items
            symbol = "‚úÖ" if is_selected else "‚ûï"
            keyboard.append([InlineKeyboardButton(
                f"{symbol} {data['emoji']} {name}",
                callback_data=f"autostock_egg_{name}"
            )])
        keyboard.append([InlineKeyboardButton("‚Üê ‚öîÔ∏è –ì–ò–†–´", callback_data="autostock_show_gear")])
        message = (
            "üîî *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–°–¢–û–ö–ê–ú–ò*\n\n"
            "ü•ö *–Ø–ô–¶–ê*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n"
            "‚ûï - –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚úÖ - —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"
        )