import os
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from zoneinfo import ZoneInfo
import threading

# Load environment
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# New stock endpoint
STOCK_API = "https://api.joshlei.com/v2/growagarden/stock"
WEATHER_API = "https://api.joshlei.com/v2/growagarden/weather"

# Emoji mappings
CATEGORY_EMOJI = {
    "seeds": "üå±", "gear": "üß∞", "egg": "ü•ö", "cosmetic": "üíÑ", "weather": "‚òÅÔ∏è"
}
ITEM_EMOJI = {
    # Seeds
    "carrot": "ü•ï", "strawberry": "üçì", "blueberry": "ü´ê", "tomato": "üçÖ", "banana": "üçå",
    "cauliflower": "ü•¶", "watermelon": "üçâ", "rafflesia": "üå∫", "green_apple": "üçè",
    "avocado": "ü•ë", "pineapple": "üçç", "kiwi": "ü•ù", "bell_pepper": "üå∂Ô∏è",
    "prickly_pear": "üåµ", "loquat": "üçë", "feijoa": "ü•ù", "pitcher_plant": "üå±", "sugar_apple": "üçé", "grape": "üçá", "coconut": "ü••", "pumpkin": "üéÉ", "pepper": "üå∂Ô∏è", "cacao": "üç´", "apple": "üçé", "bamboo": "üéç", "burning_bud": "üåº", "dragon_fruit": "üê≤ü•≠", "orange_tulip": "üå∑",
    "mango": "ü•≠", "cactus": "üåµ", "ember_lily": "üå∏", "beanstalk": "üåø", "mushroom": "üçÑ", "daffodil": "üåº",
    # Gear
    "cleaning_spray": "üß¥", "trowel": "‚õèÔ∏è", "watering_can": "üöø", "recall_wrench": "üîß",
    "basic_sprinkler": "üå¶Ô∏è", "advanced_sprinkler": "üí¶", "godly_sprinkler": "‚ö°", "master_sprinkler": "üåßÔ∏è",
    "magnifying_glass": "üîç", "tanning_mirror": "ü™û", "favorite_tool": "‚ù§Ô∏è", "harvest_tool": "üß≤", "friendship_pot": "ü§ù",
    # Eggs
    "common_egg": "ü•ö", "mythical_egg": "üê£", "bug_egg": "üê£", "common_summer_egg": "ü•ö", "rare_summer_egg": "ü•ö", "paradise_egg": "üê£", "bee_egg": "üê£",
    # Cosmetics
    "sign_crate": "üì¶", "medium_wood_flooring": "ü™µ", "market_cart": "üõí",
    "yellow_umbrella": "‚òÇÔ∏è", "hay_bale": "üåæ", "brick_stack": "üß±",
    "torch": "üî•", "stone_lantern": "üèÆ", "brown_bench": "ü™ë", "red_cooler_chest": "üì¶", "log_bench": "üõãÔ∏è",
    "light_on_ground": "üí°", "small_circle_tile": "‚ö™", "beach_crate": "üì¶","blue_cooler_chest": "üßä", "large_wood_flooring": "ü™µ", "medium_stone_table": "üóÑÔ∏è", "wood_pile": "ü™µ", "medium_path_tile": "üõ§Ô∏è", "shovel_grave": "‚õèÔ∏è"
}

WEATHER_EMOJI = {
    "rain": "üåßÔ∏è", "heatwave": "üî•", "summerharvest": "‚òÄÔ∏è",
    "tornado": "üå™Ô∏è", "windy": "üå¨Ô∏è", "auroraborealis": "üåå",
    "tropicalrain": "üå¥üåßÔ∏è", "nightevent": "üåô", "sungod": "‚òÄÔ∏è",
    "megaharvest": "üåæ", "gale": "üå¨Ô∏è", "thunderstorm": "‚õàÔ∏è",
    "bloodmoonevent": "üåïü©∏", "meteorshower": "‚òÑÔ∏è", "spacetravel": "ü™ê",
    "disco": "üíÉ", "djjhai": "üéµ", "blackhole": "üï≥Ô∏è",
    "jandelstorm": "üå©Ô∏è", "sandstorm": "üèúÔ∏è"
}

# Fetch stock from unified endpoint

def fetch_all_stock() -> dict:
    r = requests.get(STOCK_API)
    data = r.json() if r.ok else {}
    return data  # data contains keys seed_stock, gear_stock, egg_stock, eventshop_stock, cosmetic_stock

# Fetch weather

def fetch_weather() -> list:
    r = requests.get(WEATHER_API)
    return r.json().get("weather", [])

# Formatters

def format_block(key: str, items: list) -> str:
    if not items:
        return ""
    emoji = CATEGORY_EMOJI.get(key, "‚Ä¢")
    title = key.replace("_stock", "").capitalize()
    lines = [f"‚îÅ {emoji} *{title}* ‚îÅ"]
    for it in items:
        name = it.get("display_name")
        qty = it.get("quantity", 0)
        key_id = it.get("item_id")
        em = ITEM_EMOJI.get(key_id, "‚Ä¢")
        lines.append(f"   {em} {name}: x{qty}")
    return "\n".join(lines) + "\n\n"


def format_weather(weather_list: list) -> str:
    active = next((w for w in weather_list if w.get("active")), None)
    if not active:
        return "‚îÅ ‚òÅÔ∏è *–ü–æ–≥–æ–¥–∞* ‚îÅ\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
    name = active.get("weather_name")
    eid = active.get("weather_id")
    emoji = WEATHER_EMOJI.get(eid, "‚òÅÔ∏è")
    end_ts = active.get("end_duration_unix", 0)
    ends = datetime.fromtimestamp(end_ts, tz=ZoneInfo("Europe/Moscow")).strftime("%H:%M MSK") if end_ts else "--"
    dur = active.get("duration", 0)
    return (f"‚îÅ {emoji} *–ü–æ–≥–æ–¥–∞* ‚îÅ\n"
            f"*–¢–µ–∫—É—â–∞—è:* {name}\n"
            f"*–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤:* {ends}\n"
            f"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {dur} —Å–µ–∫")

# Keyboard
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –°—Ç–æ–∫–∏", callback_data="show_stock")],
        [InlineKeyboardButton("üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data="show_cosmetic")],
        [InlineKeyboardButton("‚òÅÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="show_weather")]
    ])

# Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard())

async def handle_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tgt = update.callback_query.message if update.callback_query else update.message
    if update.callback_query: await update.callback_query.answer()
    data = fetch_all_stock()
    now = datetime.now(tz=ZoneInfo("Europe/Moscow")).strftime('%d.%m.%Y %H:%M:%S MSK')
    # Header with time and title
    text = f"*üïí {now}*üìä –°—Ç–æ–∫–∏ Grow a Garden:*"
    # Sections
    section_map = [("seed_stock", "Seeds"), ("gear_stock", "Gear"), ("egg_stock", "Egg")]
    for key, title in section_map:
        items = data.get(key, [])
        if not items:
            continue
        emoji = CATEGORY_EMOJI.get(key, "‚Ä¢")
        text += f"‚îÅ {emoji} *{title}* ‚îÅ"
        for it in items:
            name = it.get("display_name")
            qty = it.get("quantity", 0)
            em = ITEM_EMOJI.get(it.get("item_id"), "‚Ä¢")
            text += f"   {em} {name}: x{qty}"
        text += ""
    await tgt.reply_markdown(text)

async def handle_cosmetic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tgt = update.callback_query.message if update.callback_query else update.message
    if update.callback_query: await update.callback_query.answer()
    data = fetch_all_stock()
    now = datetime.now(tz=ZoneInfo("Europe/Moscow")).strftime('%d.%m.%Y %H:%M:%S MSK')
    text = f"*üïí {now}*\n\n"
    text += format_block("cosmetic_stock", data.get("cosmetic_stock", []))
    await tgt.reply_markdown(text)

async def handle_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tgt = update.callback_query.message if update.callback_query else update.message
    if update.callback_query: await update.callback_query.answer()
    await tgt.reply_markdown(format_weather(fetch_weather()))

# Flask healthcheck
app = Flask(__name__)
@app.route("/")
def healthcheck(): return "OK"

# Run
if __name__ == "__main__":
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT",5000))), daemon=True).start()
    bot = ApplicationBuilder().token(BOT_TOKEN).build()
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CallbackQueryHandler(handle_stock, pattern="show_stock"))
    bot.add_handler(CallbackQueryHandler(handle_cosmetic, pattern="show_cosmetic"))
    bot.add_handler(CallbackQueryHandler(handle_weather, pattern="show_weather"))
    bot.add_handler(CommandHandler("stock", handle_stock))
    bot.add_handler(CommandHandler("cosmetic", handle_cosmetic))
    bot.add_handler(CommandHandler("weather", handle_weather))
    bot.run_polling()
