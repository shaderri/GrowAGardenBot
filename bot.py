# bot.py
import os
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("API_KEY")

# Supabase REST endpoint Arcaiuz
BASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/growagarden_stock"
HEADERS = {
    "apikey": API_KEY,
    "Authorization": f"Bearer {API_KEY}"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORY_EMOJI = {
    "seeds_stock":    "üå±",
    "cosmetic_stock": "üíé",
    "gear_stock":     "üß∞",
    "egg_stock":      "ü•ö",
    "weather":        "‚òÅÔ∏è"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_EMOJI = {
    # Seeds
    "Carrot": "ü•ï", "Strawberry": "üçì", "Blueberry": "ü´ê", "Tomato": "üçÖ",
    "Banana": "üçå",
    # Gear
    "Harvest Tool": "üß≤", "Trowel": "‚õèÔ∏è", "Cleaning Spray": "üß¥",
    "Recall Wrench": "üîß", "Favorite Tool": "‚ù§Ô∏è", "Watering Can": "üöø",
    # Eggs
    "Common Egg": "ü•ö"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∫–∞ –ø–æ —Ç–∏–ø—É
def fetch_stock(stock_type: str):
    params = {
        "select": "*",
        "type": f"eq.{stock_type}",
        "active": "eq.true",
        "order": "created_at.desc"
    }
    resp = requests.get(BASE_URL, headers=HEADERS, params=params)
    return resp.json() if resp.ok else []

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
def fetch_weather():
    params = {
        "select": "*",
        "type": "eq.weather",
        "active": "eq.true",
        "order": "date.desc",
        "limit": 1
    }
    resp = requests.get(BASE_URL, headers=HEADERS, params=params)
    return resp.json() if resp.ok else []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å—Ç–æ–∫–∞
def format_block(title: str, emoji: str, items: list) -> str:
    if not items:
        return ""
    header = title.replace("_", " ").title().replace(" Stock", "")
    text = f"**‚îÅ {emoji} {header} Stock ‚îÅ**\n"
    for it in items:
        name = it.get("display_name", "Unknown")
        qty  = it.get("multiplier", 0)
        em   = ITEM_EMOJI.get(name, "‚Ä¢")
        text += f"   {em} {name}: x{qty}\n"
    return text + "\n"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
def format_weather(item: dict) -> str:
    if not item:
        return "**‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**"
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É UTC –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MSK
    iso_date = item.get("date")
    try:
        dt_utc = datetime.fromisoformat(iso_date.replace("Z", "+00:00"))
        dt_msk = dt_utc.astimezone(ZoneInfo("Europe/Moscow"))
        time_msk = dt_msk.strftime("%d.%m.%Y %H:%M:%S MSK")
    except Exception:
        time_msk = iso_date
    desc = item.get("display_name", "?")
    mult = item.get("multiplier", "?")
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    lines = []
    lines.append("**‚îÅ ‚òÅÔ∏è Weather ‚îÅ**")
    lines.append(f"   üïí {time_msk}")
    lines.append(f"   üå°Ô∏è {desc}: x{mult}")
    return "\n".join(lines)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stock")],
        [InlineKeyboardButton("‚òÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="show_weather")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_keyboard()
    )

async def handle_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–æ–∫–∏
    stocks = {
        "seeds_stock":    fetch_stock("seeds_stock"),
        "cosmetic_stock": fetch_stock("cosmetic_stock"),
        "gear_stock":     fetch_stock("gear_stock"),
        "egg_stock":      fetch_stock("egg_stock"),
    }
    now = datetime.utcnow().strftime("**üïí %d.%m.%Y %H:%M:%S UTC**\n\n")
    text = now + "**üìä –°—Ç–æ–∫–∏ Grow a Garden:**\n\n"
    for key, items in stocks.items():
        text += format_block(key, CATEGORY_EMOJI.get(key, "üì¶"), items)
    await update.callback_query.message.reply_markdown(text)

async def handle_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = fetch_weather()
    item = data[0] if data else None
    text = format_weather(item)
    await update.callback_query.message.reply_markdown(text)

# Flask –¥–ª—è healthcheck
app = Flask(__name__)
@app.route("/")
def healthcheck():
    return "Bot is alive!"

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT",10000))),
        daemon=True
    ).start()

    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(handle_stock,   pattern="show_stock"))
    app_bot.add_handler(CallbackQueryHandler(handle_weather, pattern="show_weather"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
    app_bot.add_handler(CommandHandler("weather", handle_weather))
    print("‚úÖ Bot is running‚Ä¶")
    app_bot.run_polling()