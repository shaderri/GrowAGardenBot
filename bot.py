import os
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = os.getenv("CHAT_ID")

# –ù–æ–≤—ã–π API URL –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –∫–ª—é—á–µ
API_URL = "https://www.gamersberg.com/api/grow-a-garden/stock"

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORY_EMOJI = {
    "seeds":    "üå±",
    "cosmetic": "üíé",
    "gear":     "üß∞",
    "event":    "üå¥",
    "eggs":     "ü•ö",
}

# –≠–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä—è–π –ø–æ –∂–µ–ª–∞–Ω–∏—é)
ITEM_EMOJI = {
    # Seeds
    "Feijoa": "ü•ù",
    "Kiwi": "ü•ù",
    "Avocado": "ü•ë",
    "Sugar Apple": "üçè",
    "Tomato": "üçÖ",
    "Bell Pepper": "üå∂Ô∏è",
    "Pitcher Plant": "üå±",
    "Prickly Pear": "üåµ",
    "Cauliflower": "ü•¶",
    "Blueberry": "ü´ê",
    "Carrot": "ü•ï",
    "Loquat": "üçë",
    "Green Apple": "üçè",
    "Strawberry": "üçì",
    "Watermelon": "üçâ",
    "Banana": "üçå",
    "Rafflesia": "üå∫",
    "Pineapple": "üçç",
    # Cosmetic
    "Green Tractor": "üöú",
    "Large Wood Flooring": "ü™µ",
    "Sign Crate": "üì¶",
    "Small Wood Table": "ü™ë",
    "Large Path Tile": "üõ§Ô∏è",
    "Medium Path Tile": "‚¨õ",
    "Wood Fence": "ü™µ",
    "Axe Stump": "ü™®",
    "Shovel": "ü™ì",
    # Gear
    "Advanced Sprinkler": "üí¶",
    "Master Sprinkler": "üíß",
    "Basic Sprinkler": "üå¶Ô∏è",
    "Godly Sprinkler": "‚ö°",
    "Trowel": "‚õèÔ∏è",
    "Harvest Tool": "üß≤",
    "Cleaning Spray": "üß¥",
    "Recall Wrench": "üîß",
    "Favorite Tool": "‚ù§Ô∏è",
    "Watering Can": "üöø",
    "Magnifying Glass": "üîç",
    "Tanning Mirror": "ü™û",
    "Friendship Pot": "üåª",
    # Event (Summer Stock)
    "Hamster": "üêπ",
    "Summer Seed Pack": "üåû",
    "Oasis Crate": "üèùÔ∏è",
    "Traveler's Fruit": "‚úàÔ∏è",
    "Delphinium": "üå∏",
    "Oasis Egg": "ü•ö",
    "Lily of the Valley": "üíê",
    "Mutation Spray Burnt": "üî•",
    # Eggs list entries
    "Common Egg": "ü•ö",
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "Location"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫—Ä–æ–º–µ —è–∏—Ü)
def format_dict_block(name: str, data: dict) -> str:
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    filtered = {k: v for k, v in data.items() if int(v) > 0}
    if not filtered:
        return ""

    # –î–ª—è event –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –≤ Summer Stock
    title = "Summer Stock" if name == "event" else f"{name.capitalize()} Stock"
    text = f"‚îÅ {CATEGORY_EMOJI.get(name, '')} {title} ‚îÅ\n"
    for item, qty in filtered.items():
        emoji = ITEM_EMOJI.get(item, "‚Ä¢")
        text += f"   {emoji} {item}: x{qty}\n"
    return text + "\n"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —è–∏—Ü (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
def format_eggs_block(eggs: list) -> str:
    # –ü—Ä–æ–ø—É—Å–∫ "Location" –∏ –Ω—É–ª–µ–≤—ã—Ö
    eggs_filtered = [e for e in eggs if e.get("name") != "Location" and int(e.get("quantity", 0)) > 0]
    if not eggs_filtered:
        return ""

    text = f"‚îÅ {CATEGORY_EMOJI.get('eggs')} Egg Stock ‚îÅ\n"
    for egg in eggs_filtered:
        name = egg.get("name")
        qty  = egg.get("quantity")
        emoji = ITEM_EMOJI.get(name, "ü•ö")
        text += f"   {emoji} {name}: x{qty}\n"
    return text + "\n"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∫–æ–≤
def get_keyboard():
    button = InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stocks")
    return InlineKeyboardMarkup([[button]])

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫:",
        reply_markup=get_keyboard()
    )

async def on_button(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    # –ü–æ–ª—É—á–∞–µ–º JSON
    resp = requests.get(API_URL)
    data = resp.json().get("data", [])
    if not data:
        await update.callback_query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    info = data[0]

    # –¢–∞–π–º—à—Ç–∞–º–ø –∏–∑ –ø–æ–ª—è timestamp
    ts = int(info.get("timestamp", 0))
    now = datetime.fromtimestamp(ts).strftime("%d.%m.%Y %H:%M:%S")

    text = f"üïí {now}\n\n"
    text += "üìä *–í—Å–µ —Å—Ç–æ–∫–∏ Grow a Garden:*\n\n"
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—É—Å—Ç—ã–µ
    text += format_dict_block("seeds", info.get("seeds", {}))
    text += format_dict_block("cosmetic", info.get("cosmetic", {}))
    text += format_dict_block("gear", info.get("gear", {}))
    text += format_dict_block("event", info.get("event", {}))
    text += format_eggs_block(info.get("eggs", []))

    await update.callback_query.message.reply_markdown(text)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_button, pattern="show_stocks"))
    print("Bot running‚Ä¶")
    app.run_polling()