# bot.py
import os
import threading
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("API_KEY")

# Supabase REST endpoint Arcaiuz
BASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/growagarden_stock"
HEADERS = {
    "apikey": API_KEY,
    "Authorization": f"Bearer {API_KEY}"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORY_EMOJI = {
    "seeds_stock":    "üå±",
    "cosmetic_stock": "üíé",
    "gear_stock":     "üß∞",
    "egg_stock":      "ü•ö",
}

# –≠–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_EMOJI = {
    "Feijoa":"ü•ù", "Kiwi":"ü•ù", "Avocado":"ü•ë", "Sugar Apple":"üçè", "Tomato":"üçÖ",
    "Bell Pepper":"üå∂Ô∏è", "Pitcher Plant":"üå±", "Prickly Pear":"üåµ", "Cauliflower":"ü•¶",
    "Blueberry":"ü´ê", "Carrot":"ü•ï", "Loquat":"üçë", "Green Apple":"üçè", "Strawberry":"üçì",
    "Watermelon":"üçâ", "Banana":"üçå", "Rafflesia":"üå∫", "Pineapple":"üçç",
    "Green Tractor":"üöú", "Large Wood Flooring":"ü™µ", "Sign Crate":"üì¶", "Small Wood Table":"ü™ë",
    "Large Path Tile":"üõ§Ô∏è", "Medium Path Tile":"‚¨õ", "Wood Fence":"ü™µ", "Axe Stump":"ü™®", "Shovel":"ü™ì",
    "Advanced Sprinkler":"üí¶", "Master Sprinkler":"üíß", "Basic Sprinkler":"üå¶Ô∏è", "Godly Sprinkler":"‚ö°",
    "Trowel":"‚õèÔ∏è", "Harvest Tool":"üß≤", "Cleaning Spray":"üß¥", "Recall Wrench":"üîß",
    "Favorite Tool":"‚ù§Ô∏è", "Watering Can":"üöø", "Magnifying Glass":"üîç", "Tanning Mirror":"ü™û", "Friendship Pot":"üåª",
    "Common Egg":"ü•ö"
}

# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫–∏ –∏–∑ Supabase
def fetch_stock(stock_type: str):
    params = {
        "select": "*",
        "type": f"eq.{stock_type}",
        "active": "eq.true",
        "order": "created_at.desc"
    }
    try:
        resp = requests.get(BASE_URL, headers=HEADERS, params=params)
        return resp.json() if resp.ok else []
    except Exception as e:
        print(f"Error fetching {stock_type}: {e}")
        return []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –¥–ª—è Telegram
def format_block(title: str, emoji: str, items: list) -> str:
    if not items:
        return ""
    title_pretty = title.replace("_stock", "").capitalize()
    text = f"‚îÅ {emoji} {title_pretty} ‚îÅ\n"
    for it in items:
        name = it.get("display_name", "???")
        qty  = it.get("multiplier", 0)
        em   = ITEM_EMOJI.get(name, "‚Ä¢")
        text += f"   {em} {name}: x{qty}\n"
    return text + "\n"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stock")]
    ])

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–æ–∫–æ–≤
async def send_stock_message(chat_id, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    stocks = {
        "seeds_stock":    fetch_stock("seeds_stock"),
        "cosmetic_stock": fetch_stock("cosmetic_stock"),
        "gear_stock":     fetch_stock("gear_stock"),
        "egg_stock":      fetch_stock("egg_stock"),
    }

    # –í—Ä–µ–º—è UTC+3
    now = datetime.utcnow() + timedelta(hours=3)
    timestamp = now.strftime("%d.%m.%Y %H:%M:%S UTC+3")

    text = f"üïí {timestamp}\n\nüìä *–°—Ç–æ–∫–∏ Grow a Garden:*\n\n"
    for category, items in stocks.items():
        text += format_block(category, CATEGORY_EMOJI.get(category, "üì¶"), items)

    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏ /stock, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–∫–∏:",
        reply_markup=get_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /stock
async def stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_stock_message(update.effective_chat.id, context)

# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await send_stock_message(update.callback_query.message.chat_id, context)

# Flask –¥–ª—è ping
app = Flask(__name__)
@app.route("/")
def healthcheck():
    return "Bot is alive!"

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000))),
        daemon=True
    ).start()

    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("stock", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏ Grow a Garden")
    ]
    app_bot.bot.set_my_commands(commands)

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("stock", stock))
    app_bot.add_handler(CallbackQueryHandler(on_button, pattern="show_stock"))

    print("‚úÖ Bot is running‚Ä¶")
    app_bot.run_polling()
