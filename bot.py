# bot.py
import os
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# 1) –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")  # —Ç–≤–æ–π Supabase API key

# 2) –°—Ç–∞—Ä—ã–π Supabase REST endpoint Arcaiuz
BASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/growagarden_stock"
HEADERS = {
    "apikey": API_KEY,
    "Authorization": f"Bearer {API_KEY}"
}

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º
CATEGORY_EMOJI = {"seeds":"üå±","cosmetic":"üíé","gear":"üß∞","event":"üå¥","eggs":"ü•ö"}
ITEM_EMOJI = {
    # Seeds
    "Feijoa":"ü•ù","Kiwi":"ü•ù","Avocado":"ü•ë","Sugar Apple":"üçè","Tomato":"üçÖ",
    "Bell Pepper":"üå∂Ô∏è","Pitcher Plant":"üå±","Prickly Pear":"üåµ","Cauliflower":"ü•¶",
    "Blueberry":"ü´ê","Carrot":"ü•ï","Loquat":"üçë","Green Apple":"üçè","Strawberry":"üçì",
    "Watermelon":"üçâ","Banana":"üçå","Rafflesia":"üå∫","Pineapple":"üçç",
    # Cosmetic
    "Green Tractor":"üöú","Large Wood Flooring":"ü™µ","Sign Crate":"üì¶","Small Wood Table":"ü™ë",
    "Large Path Tile":"üõ§Ô∏è","Medium Path Tile":"‚¨õ","Wood Fence":"ü™µ","Axe Stump":"ü™®","Shovel":"ü™ì",
    # Gear
    "Advanced Sprinkler":"üí¶","Master Sprinkler":"üíß","Basic Sprinkler":"üå¶Ô∏è","Godly Sprinkler":"‚ö°",
    "Trowel":"‚õèÔ∏è","Harvest Tool":"üß≤","Cleaning Spray":"üß¥","Recall Wrench":"üîß",
    "Favorite Tool":"‚ù§Ô∏è","Watering Can":"üöø","Magnifying Glass":"üîç","Tanning Mirror":"ü™û","Friendship Pot":"üåª",
    # Eggs
    "Common Egg":"ü•ö"
}

# 4) –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–æ–∫–∞ –ø–æ —Ç–∏–ø—É
def fetch_stock(stock_type: str):
    params = {
        "select": "*",
        "type": f"eq.{stock_type}",
        "active": "eq.true",
        "order": "created_at.desc"
    }
    resp = requests.get(BASE_URL, headers=HEADERS, params=params)
    return resp.json() if resp.ok else []

# 5) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
def format_block(title: str, emoji: str, items: list) -> str:
    if not items:
        return ""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ —á–∏—Ç–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = title.replace("_", " ").title()
    text = f"‚îÅ {emoji} {header} ‚îÅ\n"
    for it in items:
        name = it.get("display_name")
        qty = it.get("multiplier")
        em = ITEM_EMOJI.get(name, "‚Ä¢")
        text += f"   {em} {name}: x{qty}\n"
    return text + "\n"

# 6) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ Telegram
def get_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stock")]])

# 7) –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ç–æ–∫–∏:",
        reply_markup=get_keyboard()
    )

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ç—ã—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    seeds    = fetch_stock("seeds_stock")
    cosmetic = fetch_stock("cosmetic_stock")
    gear     = fetch_stock("gear_stock")
    egg      = fetch_stock("egg_stock")

    now = datetime.utcnow().strftime("%d.%m.%Y %H:%M:%S UTC")
    text = f"üïí {now}\n\nüìä *–°—Ç–æ–∫–∏ Grow a Garden:*\n\n"
    text += format_block("seeds_stock",   CATEGORY_EMOJI["seeds_stock"],   seeds)
    text += format_block("cosmetic_stock",CATEGORY_EMOJI["cosmetic_stock"],cosmetic)
    text += format_block("gear_stock",    CATEGORY_EMOJI["gear_stock"],    gear)
    text += format_block("egg_stock",     CATEGORY_EMOJI["egg_stock"],     egg)

    await update.callback_query.message.reply_markdown(text)

# 8) Flask –¥–ª—è healthcheck
app = Flask(__name__)

@app.route("/")
def healthcheck():
    return "Bot is alive!"

# 9) –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(
        target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000))),
        daemon=True
    ).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç
    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(on_button, pattern="show_stock"))
    print("‚úÖ Bot running‚Ä¶")
    app_bot.run_polling()
