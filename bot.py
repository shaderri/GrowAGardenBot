# bot.py
import os
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –û—Å–Ω–æ–≤–Ω–æ–π API URL
API_URL = "https://www.gamersberg.com/api/grow-a-garden/stock"

# –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º
CATEGORY_EMOJI = {"seeds":"üå±","cosmetic":"üíé","gear":"üß∞","event":"üå¥","eggs":"ü•ö"}
ITEM_EMOJI = {
    # Seeds
    "Feijoa":"ü•ù","Kiwi":"ü•ù","Avocado":"ü•ë","Sugar Apple":"üçè","Tomato":"üçÖ",
    "Bell Pepper":"üå∂Ô∏è","Pitcher Plant":"üå±","Prickly Pear":"üåµ","Cauliflower":"ü•¶",
    "Blueberry":"ü´ê","Carrot":"ü•ï","Loquat":"üçë","Green Apple":"üçè","Strawberry":"üçì",
    "Watermelon":"üçâ","Banana":"üçå","Rafflesia":"üå∫","Pineapple":"üçç",
    # Cosmetic
    "Green Tractor":"üöú","Large Wood Flooring":"ü™µ","Sign Crate":"üì¶","Small Wood Table":"ü™ë",
    "Large Path Tile":"üõ§Ô∏è","Medium Path Tile":"‚¨õ","Wood Fence":"ü™µ","Axe Stump":"ü™®","Shovel":"ü™ì",
    # Gear
    "Advanced Sprinkler":"üí¶","Master Sprinkler":"üíß","Basic Sprinkler":"üå¶Ô∏è","Godly Sprinkler":"‚ö°",
    "Trowel":"‚õèÔ∏è","Harvest Tool":"üß≤","Cleaning Spray":"üß¥","Recall Wrench":"üîß",
    "Favorite Tool":"‚ù§Ô∏è","Watering Can":"üöø","Magnifying Glass":"üîç","Tanning Mirror":"ü™û","Friendship Pot":"üåª",
    # Event
    "Hamster":"üêπ","Summer Seed Pack":"üåû","Oasis Crate":"üèùÔ∏è","Traveler's Fruit":"‚úàÔ∏è",
    "Delphinium":"üå∏","Oasis Egg":"ü•ö","Lily of the Valley":"üíê","Mutation Spray Burnt":"üî•",
    # Eggs
    "Common Egg":"ü•ö"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
def format_dict_block(name: str, data: dict) -> str:
    filtered = {k: v for k, v in data.items() if int(v) > 0}
    if not filtered:
        return ""
    title = "Summer Stock" if name == "event" else f"{name.capitalize()} Stock"
    text = f"‚îÅ {CATEGORY_EMOJI.get(name)} {title} ‚îÅ\n"
    for item, qty in filtered.items():
        emoji = ITEM_EMOJI.get(item, "‚Ä¢")
        text += f"   {emoji} {item}: x{qty}\n"
    return text + "\n"

def format_eggs_block(eggs: list) -> str:
    filtered = [e for e in eggs if e.get("name") != "Location" and int(e.get("quantity", 0)) > 0]
    if not filtered:
        return ""
    text = f"‚îÅ {CATEGORY_EMOJI.get('eggs')} Egg Stock ‚îÅ\n"
    for egg in filtered:
        name = egg.get("name")
        qty = egg.get("quantity")
        emoji = ITEM_EMOJI.get(name, "ü•ö")
        text += f"   {emoji} {name}: x{qty}\n"
    return text + "\n"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

def get_keyboard():
    btn = InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stock")
    return InlineKeyboardMarkup([[btn]])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∫–∏ Grow a Garden:",
        reply_markup=get_keyboard()
    )

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –¥–æ–±–∞–≤–ª—è–µ–º cookie –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Gamersberg
    cookie = os.getenv("API_COOKIE")  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env: API_COOKIE=session_start=...
    headers = {"Cookie": cookie}
    resp = requests.get(API_URL, headers=headers)
    data = resp.json().get("data", [])
    if not data:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    info = data[0]
    ts = int(info.get("timestamp", 0))
    now = datetime.fromtimestamp(ts).strftime("%d.%m.%Y %H:%M:%S")
    text = f"üïí {now}\n\nüìä *–°—Ç–æ–∫–∏ Grow a Garden:*\n\n"
    text += format_dict_block("seeds", info.get("seeds", {}))
    text += format_dict_block("cosmetic", info.get("cosmetic", {}))
    text += format_dict_block("gear", info.get("gear", {}))
    text += format_dict_block("event", info.get("event", {}))
    text += format_eggs_block(info.get("eggs", []))
    await update.callback_query.message.reply_markdown(text)

# –ó–∞–ø—É—Å–∫
from flask import Flask
app = Flask(__name__)
@app.route("/")
def healthcheck():
    return "Bot is alive!"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–µ
    flask_thread = threading.Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000))), daemon=True)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    app_bot = ApplicationBuilder().token(BOT_TOKEN).build()
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(on_button, pattern="show_stock"))
    print("‚úÖ Bot running‚Ä¶")
    app_bot.run_polling()