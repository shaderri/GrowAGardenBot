import os
import sys
import signal
import logging
import threading
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import Any, Dict, List, Tuple

import requests
from flask import Flask
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

import asyncio
import types

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ======
logging.basicConfig(
    format="%(asctime)s %(levelname)s:%(name)s: %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("growagarden-bot")

# ====== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID_ENV = os.getenv("CHANNEL_ID")
KEEPALIVE_PORT = int(os.getenv("PORT", 10000))
JSTUDIO_KEY = os.getenv("JSTUDIO_KEY")


def parse_channel_id(val: str):
    if val is None:
        return None
    s = val.strip()
    if s.startswith("@"):
        return s
    try:
        return int(s)
    except Exception:
        return s


CHANNEL_ID = parse_channel_id(CHANNEL_ID_ENV)

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ –∫–∞—Ä—Ç—ã (–∫–∞–∫ —É —Ç–µ–±—è) ======
STOCK_API = "https://api.joshlei.com/v2/growagarden/stock"

# Emoji mappings
CATEGORY_EMOJI = {
    "seeds": "üå±", "gear": "üß∞", "egg": "ü•ö", "cosmetic": "üíÑ", "weather": "‚òÅÔ∏è"
}

ITEM_EMOJI = {
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏) ...
    "grape": "üçá",
    "mushroom": "üçÑ",
    "pepper": "üå∂Ô∏è",
    "cacao": "üç´",
    "beanstalk": "ü´õ",
    "ember_lily": "üå∏",
    "sugar_apple": "üçè",
    "burning_bud": "üî•",
    "giant_pinecone": "üå∞",
    "master_sprinkler": "üåßÔ∏è",
    "grandmaster_sprinkler": "üí¶",
    "levelup_lollipop": "üç≠",
    "elder_strawberry": "üçì",
    "romanesco": "ü•¶",
    "paradise_egg": "üê£",
    "bug_egg": "üê£",
}

# –ü–µ—Ä–µ–≤–æ–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
ITEM_NAME_RU = {
    "paradise_egg": "–†–∞–π—Å–∫–æ–µ —è–π—Ü–æ",
    "bug_egg": "–Ø–π—Ü–æ –ñ—É–∫–∞",
    "grape": "–í–∏–Ω–æ–≥—Ä–∞–¥",
    "mushroom": "–ì—Ä–∏–±—ã",
    "pepper": "–ü–µ—Ä–µ—Ü",
    "cacao": "–ö–∞–∫–∞–æ",
    "beanstalk": "–ë–æ–±–æ–≤—ã–π —Å—Ç–µ–±–µ–ª—å",
    "ember_lily": "–≠–º–±–µ—Ä –ª–∏–ª–∏",
    "sugar_apple": "–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ",
    "burning_bud": "–ì–æ—Ä—è—â–∏–π –±—É—Ç–æ–Ω",
    "giant_pinecone": "–ì–∏–≥–∞–Ω—Ç—Å–∫–∞—è —à–∏—à–∫–∞",
    "master_sprinkler": "–ú–∞—Å—Ç–µ—Ä —Å–ø—Ä–∏–Ω–∫–ª–µ—Ä",
    "grandmaster_sprinkler": "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä —Å–ø—Ä–∏–Ω–∫–ª–µ—Ä",
    "levelup_lollipop": "–õ–µ–¥–µ–Ω–µ—Ü —É—Ä–æ–≤–Ω—è",
    "elder_strawberry": "–ë—É–∑–∏–Ω–Ω–∞—è –∫–ª—É–±–Ω–∏–∫–∞",
    "romanesco": "–†–æ–º–∞–Ω–µ—Å–∫–æ",
}

# Items to notify about
NOTIFY_ITEMS = [
    "grape", "mushroom", "pepper", "cacao",
    "beanstalk", "ember_lily", "sugar_apple",
    "burning_bud", "giant_pinecone",
    "master_sprinkler", "grandmaster_sprinkler", "levelup_lollipop", "elder_strawberry", "romanesco"
]

# Prices for notifications (in ¬¢)
PRICE_MAP = {
    "paradise_egg": 50_000_000,
    "bug_egg": 50_000_000,
    "grape": 850_000,
    "mushroom": 150_000,
    "pepper": 1_000_000,
    "cacao": 2_500_000,
    "beanstalk": 10_000_000,
    "ember_lily": 15_000_000,
    "sugar_apple": 25_000_000,
    "burning_bud": 40_000_000,
    "giant_pinecone": 55_000_000,
    "master_sprinkler": 10_000_000,
    "grandmaster_sprinkler": 1_000_000_000,
    "levelup_lollipop": 10_000_000_000,
    "elder_strawberry": 70_000_000,
    "romanesco":  88_000_000,
}

# ====== Flask keepalive ======
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "Bot is running", 200

# ====== Lock (PID file) ======
LOCK_FILE = "/tmp/growagarden_bot.lock"


def is_pid_running(pid: int) -> bool:
    try:
        os.kill(pid, 0)
    except ProcessLookupError:
        return False
    except PermissionError:
        return True
    except Exception:
        return False
    return True


def acquire_lock_or_exit():
    if os.path.exists(LOCK_FILE):
        try:
            with open(LOCK_FILE, "r") as f:
                data = f.read().strip()
                pid = int(data) if data else None
        except Exception:
            pid = None

        if pid and is_pid_running(pid):
            logger.warning("Lock file %s exists and PID %s is running -> –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.", LOCK_FILE, pid)
            sys.exit(0)
        else:
            logger.info("Lock file %s existed but PID not running -> —É–¥–∞–ª—è–µ–º stale lock.", LOCK_FILE)
            try:
                os.remove(LOCK_FILE)
            except Exception:
                pass

    try:
        with open(LOCK_FILE, "w") as f:
            f.write(str(os.getpid()))
        logger.info("–°–æ–∑–¥–∞–Ω lock —Å PID %s", os.getpid())
    except Exception as e:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock file: %s", e)
        sys.exit(1)


def remove_lock():
    try:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
            logger.info("Lock %s —É–¥–∞–ª—ë–Ω", LOCK_FILE)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ lock: %s", e)

# ====== Fetch (sync -> thread) ======
def _sync_fetch_stock_once() -> Dict[str, Any]:
    headers = {"jstudio-key": JSTUDIO_KEY} if JSTUDIO_KEY else {}
    resp = requests.get(STOCK_API, headers=headers, timeout=10)
    resp.raise_for_status()
    return resp.json()


def _sync_fetch_stock_with_retries(retries: int = 2) -> Dict[str, Any]:
    last_exc = None
    for i in range(retries + 1):
        try:
            return _sync_fetch_stock_once()
        except Exception as e:
            last_exc = e
            logger.warning("fetch attempt %d failed: %s", i+1, e)
    logger.exception("All fetch attempts failed: %s", last_exc)
    return {}


async def fetch_all_stock() -> Dict[str, Any]:
    return await asyncio.to_thread(_sync_fetch_stock_with_retries)

# ====== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ======
def format_block(key: str, items: list) -> str:
    if not items:
        return ""
    emoji = CATEGORY_EMOJI.get(key, "‚Ä¢")
    title = key.replace("_stock", "").capitalize()
    lines = [f"‚îÅ {emoji} <b>{title}</b> ‚îÅ"]
    for it in items:
        em = ITEM_EMOJI.get(it.get("item_id"), "‚Ä¢")
        display = it.get("display_name") or it.get("item_id") or "Unknown"
        qty = it.get("quantity", 0)
        lines.append(f"   {em} {display}: x{qty}")
    return "\n".join(lines) + "\n\n"

# ====== –û—á–µ—Ä–µ–¥—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ======
messages_queue: List[Tuple[str, int, str]] = []
recently_sent: Dict[str, int] = {}
last_qty: Dict[str, int] = {}
last_in_stock: Dict[str, bool] = {}
monitor_lock = asyncio.Lock()

# ====== Handlers ======
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üì¶ –°—Ç–æ–∫–∏", callback_data="show_stock")],
        [InlineKeyboardButton("üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data="show_cosmetic")],
    ]
    try:
        if update.message:
            await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /stock –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=InlineKeyboardMarkup(kb))
        else:
            await update.effective_chat.send_message("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /stock –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=InlineKeyboardMarkup(kb))
    except Exception:
        pass


async def handle_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tgt = update.callback_query.message if update.callback_query and update.callback_query.message else update.message
    if update.callback_query:
        await update.callback_query.answer()
    data = await fetch_all_stock()
    now = datetime.now(tz=ZoneInfo("Europe/Moscow")).strftime("%H:%M:%S MSK")
    text = f"üïí <b>{now}</b>\n\n"
    for sec in ["seed_stock", "gear_stock", "egg_stock", "cosmetic_stock"]:
        text += format_block(sec, data.get(sec, []))
    if tgt:
        await tgt.reply_text(text, parse_mode="HTML")

# ====== Send with fallback ======
async def send_with_retries_and_fallback(bot, chat_id, text_html: str, attempts: int = 3):
    last_exc = None
    for attempt in range(1, attempts + 1):
        try:
            await bot.send_message(chat_id=chat_id, text=text_html, parse_mode="HTML")
            return True
        except Exception as e:
            last_exc = e
            logger.warning("send attempt %d failed: %s", attempt, e)
            if attempt == attempts:
                try:
                    await bot.send_message(chat_id=chat_id, text=text_html)
                    return True
                except Exception as e2:
                    logger.exception("Final fallback send also failed: %s", e2)
                    return False
            await asyncio.sleep(0.5 * attempt)
    logger.exception("All send attempts failed, last error: %s", last_exc)
    return False

# ====== monitor_job ======
async def monitor_job(context: ContextTypes.DEFAULT_TYPE | None = None):
    # context is optional because we may call this from custom loops
    if monitor_lock.locked():
        logger.info("monitor_job –ø—Ä–æ–ø—É—â–µ–Ω: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        return

    async with monitor_lock:
        try:
            data = await fetch_all_stock()
            if not data:
                logger.debug("fetch_all_stock –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            now = datetime.now(tz=ZoneInfo("Europe/Moscow")).strftime("%H:%M:%S MSK")
            new_messages: List[Tuple[str, int, str]] = []
            local_qty_updates: Dict[str, int] = {}
            local_instock_updates: Dict[str, bool] = {}

            for sec in ["seed_stock", "gear_stock", "egg_stock", "cosmetic_stock"]:
                for it in data.get(sec, []):
                    iid = it.get("item_id")
                    if iid is None:
                        continue
                    try:
                        qty = int(it.get("quantity", 0))
                    except Exception:
                        qty = 0
                    prev_qty = last_qty.get(iid, 0)
                    was_in = last_in_stock.get(iid, False)
                    now_in = qty > 0

                    if iid in NOTIFY_ITEMS and ((now_in and not was_in) or (qty > prev_qty)):
                        name_ru = ITEM_NAME_RU.get(iid, it.get('display_name') or iid)
                        emoji = ITEM_EMOJI.get(iid, "")
                        price = PRICE_MAP.get(iid, 0)
                        price_str = f"{price:,}" if isinstance(price, int) else str(price)
                        text_html = (
                            f"<b>{emoji} {name_ru}: x{qty} –≤ —Å—Ç–æ–∫–µ!</b>\n"
                            f"üí∞ –¶–µ–Ω–∞ ‚Äî {price_str}¬¢\n"
                            f"üïí {now}\n\n@GroowAGarden"
                        )
                        last_sent_qty = recently_sent.get(iid)
                        if last_sent_qty is not None and last_sent_qty == qty:
                            logger.info("–î—É–±–ª–∏–∫–∞—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–ª—è %s (qty=%s) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º enqueue", iid, qty)
                        else:
                            new_messages.append((iid, qty, text_html))
                            logger.info("Enqueue: %s qty=%s (prev=%s, was_in=%s->now_in=%s)", iid, qty, prev_qty, was_in, now_in)

                    local_qty_updates[iid] = qty
                    local_instock_updates[iid] = now_in

            last_qty.update(local_qty_updates)
            last_in_stock.update(local_instock_updates)

            if new_messages:
                before = len(messages_queue)
                messages_queue.extend(new_messages)
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å (–¥–æ=%d, –ø–æ—Å–ª–µ=%d)", len(new_messages), before, len(messages_queue))
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ monitor_job: %s", e)


# ====== sender_job ======
async def sender_job(context: ContextTypes.DEFAULT_TYPE | None = None):
    if not messages_queue:
        return
    MAX_PER_PASS = 20
    to_send = []
    while messages_queue and len(to_send) < MAX_PER_PASS:
        to_send.append(messages_queue.pop(0))

    logger.info("Sender job: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º %d —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏: %d)", len(to_send), len(messages_queue))
    for iid, qty, text_html in to_send:
        try:
            bot = None
            if context is not None and hasattr(context, 'bot'):
                bot = context.bot
            else:
                # fallback: try to use global Application bot if available
                bot = globals().get('APP_BOT')

            if bot is None:
                # can't send right now, push back and abort
                messages_queue.append((iid, qty, text_html))
                logger.warning("–ù–µ—Ç bot –≤ sender_job ‚Äî –æ—Ç–ª–æ–∂–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ %s", iid)
                return

            ok = await send_with_retries_and_fallback(bot, CHANNEL_ID, text_html, attempts=3)
            if ok:
                recently_sent[iid] = qty
                logger.info("Sent: %s qty=%s", iid, qty)
            else:
                messages_queue.append((iid, qty, text_html))
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å %s ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (–¥–ª–∏–Ω–∞ —Å–µ–π—á–∞—Å %d)", iid, len(messages_queue))
            await asyncio.sleep(0.25)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ %s: %s ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å", iid, e)
            messages_queue.append((iid, qty, text_html))


# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ ======
def handle_termination(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª %s ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.", signum)
    remove_lock()
    os._exit(0)

signal.signal(signal.SIGINT, handle_termination)
signal.signal(signal.SIGTERM, handle_termination)


# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–æ–≤—ã–µ —Ü–∏–∫–ª—ã (–µ—Å–ª–∏ job_queue –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) ======
async def _background_monitor_loop(app):
    # first run after 5s
    await asyncio.sleep(5)
    while True:
        try:
            await monitor_job(None)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ _background_monitor_loop")
        await asyncio.sleep(10)


async def _background_sender_loop(app):
    await asyncio.sleep(7)
    while True:
        try:
            ctx = types.SimpleNamespace(bot=getattr(app, 'bot', None))
            await sender_job(ctx)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ _background_sender_loop")
        await asyncio.sleep(1)


# ====== Main: acquire lock, —Å—Ç–∞—Ä—Ç—É–µ–º Flask –≤ thread, –∑–∞–ø—É—Å–∫–∞–µ–º polling –≤ main thread ======
def main():
    acquire_lock_or_exit()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ (use_reloader=False –≤–∞–∂–Ω–æ)
    flask_thread = threading.Thread(
        target=lambda: flask_app.run(host="0.0.0.0", port=KEEPALIVE_PORT, use_reloader=False),
        daemon=True,
    )
    flask_thread.start()
    logger.info("Flask thread started (daemon) on port %s", KEEPALIVE_PORT)

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º polling –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è signal handlers
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º.")
        remove_lock()
        return

    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()

        # Register handlers
        app.add_handler(CommandHandler("start", start_handler))
        app.add_handler(CommandHandler("stock", handle_stock))
        app.add_handler(CallbackQueryHandler(handle_stock, pattern="show_stock"))
        app.add_handler(CallbackQueryHandler(handle_stock, pattern="show_cosmetic"))

        # try to ensure job_queue exists (on some PTB installs app.job_queue –ú–æ–∂–µ—Ç –±—ã—Ç—å None until initialize)
        try:
            if app.job_queue is None:
                logger.info("app.job_queue is None ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å initialize() —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å job_queue")
                loop = asyncio.get_event_loop()
                if not loop.is_running():
                    loop.run_until_complete(app.initialize())
                else:
                    # –µ—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ run_until_complete –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ,
                    # –Ω–æ —Ç–∞–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–µ–¥–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
                    logger.warning("Event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —è–≤–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å application –¥–ª—è job_queue: %s", e)

        # —Ç–µ–ø–µ—Ä—å job_queue –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω
        if getattr(app, 'job_queue', None) is not None:
            try:
                app.job_queue.run_repeating(monitor_job, interval=10, first=5)
                app.job_queue.run_repeating(sender_job, interval=1, first=7)
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –≤ job_queue: %s", e)
        else:
            # fallback: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ job_queue –≤—Å—ë –µ—â—ë None, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Ñ–æ–Ω–æ–≤—ã–µ —Ü–∏–∫–ª—ã —á–µ—Ä–µ–∑ app.create_task
            logger.warning("job_queue –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –≤—Ä—É—á–Ω—É—é")
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º bot –¥–ª—è sender_job fallback
            globals()['APP_BOT'] = None
            # —Å—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            async def _start_background_and_run():
                await app.initialize()
                # app.bot —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ initialize/start
                globals()['APP_BOT'] = app.bot
                # —Å–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
                app.create_task(_background_monitor_loop(app))
                app.create_task(_background_sender_loop(app))
                # –∑–∞–ø—É—Å–∫–∞–µ–º polling (—ç—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
                await app.start()
                await app.updater.start_polling()

            # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            loop = asyncio.get_event_loop()
            if not loop.is_running():
                loop.run_until_complete(_start_background_and_run())
                # –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ) ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥
                logger.info("_start_background_and_run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                return
            else:
                logger.error("–ù–µ —É–º–µ–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å background tasks –µ—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

        # –µ—Å–ª–∏ –º—ã –∑–¥–µ—Å—å ‚Äî job_queue —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã; –∑–∞–ø—É—Å—Ç–∏–º –æ–±—ã—á–Ω—ã–π polling
        logger.info("–ó–∞–ø—É—Å–∫ polling –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º bot –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ —Å–ª—É—á–∞–π fallback'–æ–≤
        globals()['APP_BOT'] = app.bot
        app.run_polling()  # <-- –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ main thread, signal handlers –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        logger.info("app.run_polling() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–æ–±—ã—á–Ω–æ –ø—Ä–∏ stop).")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ run_polling: %s", e)
    finally:
        remove_lock()


if __name__ == "__main__":
    main()