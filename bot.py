import os
import threading
import requests
from datetime import datetime
from dotenv import load_dotenv
from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from zoneinfo import ZoneInfo

# 1) Load environment
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("API_KEY")  # Supabase API key, not used for new source

# 2) API endpoints
SUPABASE_URL = "https://vextbzatpprnksyutbcp.supabase.co/rest/v1/growagarden_stock"
SUPABASE_HEADERS = {"apikey": API_KEY, "Authorization": f"Bearer {API_KEY}"}
JOSH_URL = "https://api.joshlei.com/v2/growagarden/stock"

# 3) Emoji mappings
CATEGORY_EMOJI = {
    "seeds_stock":    "üå±",
    "cosmetic_stock": "üíé",
    "gear_stock":     "üß∞",
    "egg_stock":      "ü•ö",
    "weather":        "‚òÅÔ∏è"
}
ITEM_EMOJI = {
    "Feijoa":"ü•ù", "Kiwi":"ü•ù", "Avocado":"ü•ë", "Sugar Apple":"üçè", "Tomato":"üçÖ",
    "Bell Pepper":"üå∂Ô∏è", "Pitcher Plant":"üå±", "Prickly Pear":"üåµ", "Cauliflower":"ü•¶",
    "Blueberry":"ü´ê", "Carrot":"ü•ï", "Loquat":"üçë", "Green Apple":"üçè", "Strawberry":"üçì",
    "Watermelon":"üçâ", "Banana":"üçå", "Rafflesia":"üå∫", "Pineapple":"üçç",
    "Green Tractor":"üöú", "Large Wood Flooring":"ü™µ", "Sign Crate":"üì¶", "Small Wood Table":"ü™ë",
    "Large Path Tile":"üõ§Ô∏è", "Medium Path Tile":"‚¨õ", "Wood Fence":"ü™µ", "Axe Stump":"ü™®", "Shovel":"ü™ì",
    "Advanced Sprinkler":"üí¶", "Master Sprinkler":"üíß", "Basic Sprinkler":"üå¶Ô∏è", "Godly Sprinkler":"‚ö°",
    "Trowel":"‚õèÔ∏è", "Harvest Tool":"üß≤", "Cleaning Spray":"üß¥", "Recall Wrench":"üîß",
    "Favorite Tool":"‚ù§Ô∏è", "Watering Can":"üöø", "Magnifying Glass":"üîç", "Tanning Mirror":"ü™û", "Friendship Pot":"üåª",
    "Common Egg":"ü•ö", "Common Summer Egg":"ü•ö", "Paradise Egg":"üê£"
}

# 4) Fetch stock from new source (excluding cosmetic)
def fetch_all_stock():
    resp = requests.get(JOSH_URL)
    if not resp.ok:
        return {}
    data = resp.json()
    # keys: seed_stock, gear_stock, egg_stock, eventshop_stock
    return {
        "seeds": data.get("seed_stock", []),
        "gear":  data.get("gear_stock", []),
        "egg":   data.get("egg_stock", []),
        "event": data.get("eventshop_stock", [])
    }

# 5) Format block
def format_block(category: str, items: list) -> str:
    if not items:
        return ""
    emoji = CATEGORY_EMOJI.get(category, "üì¶")
    title = category.capitalize() + " Stock"
    text = f"**‚îÅ {emoji} {title} ‚îÅ**\n"
    for it in items:
        name = it.get("display_name", "Unknown")
        qty  = it.get("quantity", 0)
        icon_key = it.get("item_id", name).lower()
        em = ITEM_EMOJI.get(icon_key, "‚Ä¢")
        text += f"   {em} {name}: x{qty}\n"
    return text + "\n"

# 6) Keyboard
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∫–∏", callback_data="show_stock")],
        [InlineKeyboardButton("‚òÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="show_weather")]
    ])

# 7) Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_keyboard())

async def handle_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        target = update.callback_query.message
    else:
        target = update.message
    stock = fetch_all_stock()
    now = datetime.utcnow().strftime("**üïí %d.%m.%Y %H:%M:%S UTC**\n\n")
    text = now + "**üìä –°—Ç–æ–∫–∏ Grow a Garden:**\n\n"
    # in order seeds, gear, egg, event
    text += format_block("seeds", stock.get("seeds", []))
    text += format_block("gear",  stock.get("gear", []))
    text += format_block("egg",   stock.get("egg", []))
    text += format_block("event", stock.get("event", []))
    await target.reply_markdown(text)

async def handle_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # fallback to Supabase weather
    params = {"select":"*","type":"eq.weather","active":"eq.true","order":"date.desc","limit":1}
    resp = requests.get(SUPABASE_URL, headers=SUPABASE_HEADERS, params=params)
    item = resp.json()[0] if resp.ok and resp.json() else None
    # format weather
    if not item:
        text = "**‚òÅÔ∏è Weather –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç**"
    else:
        iso = item.get("date")
        try:
            dt = datetime.fromisoformat(iso.replace("Z", "+00:00")).astimezone(ZoneInfo("Europe/Moscow"))
            time_str = dt.strftime("%d.%m.%Y %H:%M:%S MSK")
        except:
            time_str = iso
        desc = item.get("display_name", "?")
        text = "**‚îÅ ‚òÅÔ∏è Weather ‚îÅ**\n"
        text += f"   üïí {time_str}\n"
        text += f"   üå°Ô∏è {desc}\n"
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_markdown(text)
    else:
        await update.message.reply_markdown(text)

# 8) Flask healthcheck
app = Flask(__name__)
@app.route("/")
def healthcheck():
    return "Bot is alive!"

# 9) Main
if __name__ == "__main__":
    threading.Thread(target=lambda: app.run(host="0.0.0.0",port=int(os.getenv("PORT",10000))),daemon=True).start()
    bot = ApplicationBuilder().token(BOT_TOKEN).build()
    bot.add_handler(CommandHandler("start", start))
    bot.add_handler(CommandHandler("stock", handle_stock))
    bot.add_handler(CallbackQueryHandler(handle_stock, pattern="show_stock"))
    bot.add_handler(CommandHandler("weather", handle_weather))
    bot.add_handler(CallbackQueryHandler(handle_weather, pattern="show_weather"))
    print("‚úÖ Bot is running‚Ä¶")
    bot.run_polling()