# bot.py
import os
import threading
import time
import logging
import requests
from datetime import datetime
from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from zoneinfo import ZoneInfo

# Setup logging\logr = logging.getLogger()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # e.g. "-1001234567890" or "@YourChannel"

# Initialize bot and updater
bot = Bot(token=BOT_TOKEN)
updater = Updater(token=BOT_TOKEN, use_context=True)
dispatcher = updater.dispatcher

# Emoji mappings
CATEGORY_EMOJI = {
    "seeds": "üå±", "gear": "üß∞", "egg": "ü•ö", "cosmetic": "üíÑ", "weather": "‚òÅÔ∏è"
}
ITEM_EMOJI = {
    # Seeds
    "carrot": "ü•ï", "strawberry": "üçì", "blueberry": "ü´ê", "orange_tulip": "üå∑", "tomato": "üçÖ",
    "daffodil": "üåº", "watermelon": "üçâ", "pumpkin": "üéÉ", "apple": "üçé", "bamboo": "üéç",
    "coconut": "ü••", "cactus": "üåµ", "dragon_fruit": "üê≤", "mango": "ü•≠", "grape": "üçá",
    "mushroom": "üçÑ", "pepper": "üå∂Ô∏è", "cacao": "üç´", "beanstalk": "üåø", "ember_lily": "üå∏",
    "sugar_apple": "üçè", "burning_bud": "üî•",
    # Gear
    "cleaning_spray": "üß¥", "trowel": "‚õèÔ∏è", "watering_can": "üöø", "recall_wrench": "üîß",
    "basic_sprinkler": "üå¶Ô∏è", "advanced_sprinkler": "üí¶", "godly_sprinkler": "‚ö°", "master_sprinkler": "üåßÔ∏è",
    "magnifying_glass": "üîç", "tanning_mirror": "ü™û", "favorite_tool": "‚ù§Ô∏è", "harvest_tool": "üß≤", "friendship_pot": "ü§ù",
    # Eggs
    "common_egg": "ü•ö", "mythical_egg": "üê£", "bug_egg": "üê£", "common_summer_egg": "ü•ö", "rare_summer_egg": "ü•ö", "paradise_egg": "üê£", "bee_egg": "üê£",
    # Cosmetics
    "sign_crate": "üì¶", "medium_wood_flooring": "ü™µ", "market_cart": "üõí",
    "yellow_umbrella": "‚òÇÔ∏è", "hay_bale": "üåæ", "brick_stack": "üß±",
    "torch": "üî•", "stone_lantern": "üèÆ", "brown_bench": "ü™ë", "red_cooler_chest": "üì¶", "log_bench": "üõãÔ∏è", "light_on_ground": "üí°", "small_circle_tile": "‚ö™", "beach_crate": "üì¶", "blue_cooler_chest": "üßä", "large_wood_flooring": "ü™ö", "medium_stone_table": "ü™®", "wood_pile": "ü™µ", "medium_path_tile": "üõ§Ô∏è", "shovel_grave": "‚õèÔ∏è", "frog_fountain": "üê∏", "small_stone_lantern": "üïØÔ∏è", "small_wood_table": "ü™ë", "medium_circle_tile": "üîò", "small_path_tile": "üîπ", "mini_tv": "üì∫", "rock_pile": "üóø", "brown_stone_pillar": "üß±", "red_cooler_chest": "üßä", "bookshelf": "üìö", "brown_bench": "ü™ë", "log_bench": "ü™µ"
}

WEATHER_EMOJI = {
    "rain": "üåßÔ∏è", "heatwave": "üî•", "summerharvest": "‚òÄÔ∏è",
    "tornado": "üå™Ô∏è", "windy": "üå¨Ô∏è", "auroraborealis": "üåå",
    "tropicalrain": "üå¥üåßÔ∏è", "nightevent": "üåô", "sungod": "‚òÄÔ∏è",
    "megaharvest": "üåæ", "gale": "üå¨Ô∏è", "thunderstorm": "‚õàÔ∏è",
    "bloodmoonevent": "üåïü©∏", "meteorshower": "‚òÑÔ∏è", "spacetravel": "ü™ê",
    "disco": "üíÉ", "djjhai": "üéµ", "blackhole": "üï≥Ô∏è",
    "jandelstorm": "üå©Ô∏è", "sandstorm": "üèúÔ∏è"
}

WATCH_ITEMS = list(ITEM_EMOJI.keys())
last_seen = {item: None for item in WATCH_ITEMS}

# API endpoints
STOCK_API = "https://api.joshlei.com/v2/growagarden/stock"
WEATHER_API = "https://api.joshlei.com/v2/growagarden/weather"

# Fetch functions
def fetch_all_stock():
    try:
        r = requests.get(STOCK_API, timeout=10)
        r.raise_for_status()
        return r.json()
    except Exception as e:
        logging.error("Error fetching stock: %s", e)
        return {}

def fetch_weather():
    try:
        r = requests.get(WEATHER_API, timeout=10)
        r.raise_for_status()
        return r.json().get("weather", [])
    except Exception as e:
        logging.error("Error fetching weather: %s", e)
        return []

# Format functions
def format_block(key: str, items: list) -> str:
    if not items:
        return ""
    emoji = CATEGORY_EMOJI.get(key.replace("_stock", ""), "‚Ä¢")
    title = key.replace("_stock", "").capitalize()
    lines = [f"‚îÅ {emoji} *{title}* ‚îÅ"]
    for it in items:
        em = ITEM_EMOJI.get(it.get('item_id'), "‚Ä¢")
        lines.append(f"   {em} {it.get('display_name')}: x{it.get('quantity',0)}")
    return "\n".join(lines) + "\n\n"

def format_weather_block(weather_list: list) -> str:
    active = next((w for w in weather_list if w.get('active')), None)
    if not active:
        return "‚îÅ ‚òÅÔ∏è *–ü–æ–≥–æ–¥–∞* ‚îÅ\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
    name = active.get('weather_name')
    eid = active.get('weather_id')
    emoji = WEATHER_EMOJI.get(eid, "‚òÅÔ∏è")
    end_ts = active.get('end_duration_unix', 0)
    ends = datetime.fromtimestamp(end_ts, tz=ZoneInfo('Europe/Moscow')).strftime('%H:%M MSK') if end_ts else "--"
    dur = active.get('duration', 0)
    return (f"‚îÅ {emoji} *–ü–æ–≥–æ–¥–∞* ‚îÅ\n"
            f"*–¢–µ–∫—É—â–∞—è:* {name}\n"
            f"*–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤:* {ends}\n"
            f"*–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {dur} —Å–µ–∫")

# Handlers
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üì¶ –°—Ç–æ–∫–∏", callback_data='show_stock')],
        [InlineKeyboardButton("üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data='show_cosmetic')],
        [InlineKeyboardButton("‚òÅÔ∏è –ü–æ–≥–æ–¥–∞", callback_data='show_weather')]
    ]
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


def handle_stock(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()
        tgt = query.message
    else:
        tgt = update.message
    data = fetch_all_stock()
    now = datetime.now(tz=ZoneInfo('Europe/Moscow')).strftime('%d.%m.%Y %H:%M:%S MSK')
    text = f"*üïí {now}*\n\n"
    for section in ['seed_stock','gear_stock','egg_stock']:
        text += format_block(section, data.get(section, []))
    tgt.reply_markdown(text)


def handle_cosmetic(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()
        tgt = query.message
    else:
        tgt = update.message
    data = fetch_all_stock()
    now = datetime.now(tz=ZoneInfo('Europe/Moscow')).strftime('%d.%m.%Y %H:%M:%S MSK')
    text = f"*üïí {now}*\n\n" + format_block('cosmetic_stock', data.get('cosmetic_stock', []))
    tgt.reply_markdown(text)


def handle_weather(update: Update, context: CallbackContext):
    query = update.callback_query
    if query:
        query.answer()
        tgt = query.message
    else:
        tgt = update.message
    weather = fetch_weather()
    tgt.reply_markdown(format_weather_block(weather))

# Notification thread
def monitor_stock():
    data = fetch_all_stock()
    # initialize
    for sec in ['seed_stock','gear_stock','egg_stock','cosmetic_stock']:
        for it in data.get(sec,[]):
            if it['item_id'] in last_seen:
                last_seen[it['item_id']] = it['quantity']
    logging.info("Initial last_seen: %s", last_seen)
    # loop
    while True:
        data = fetch_all_stock()
        for sec in ['seed_stock','gear_stock','egg_stock','cosmetic_stock']:
            for it in data.get(sec,[]):
                iid, qty = it['item_id'], it['quantity']
                prev = last_seen.get(iid)
                if prev is not None and qty > 0 and qty != prev:
                    # notify expensive seeds
                    if iid in WATCH_ITEMS:
                        em = ITEM_EMOJI.get(iid, '‚Ä¢')
                        name = it['display_name']
                        now = datetime.now(tz=ZoneInfo('Europe/Moscow')).strftime('%d.%m.%Y %H:%M MSK')
                        msg = f"*{em} {name} –≤ —Å—Ç–æ–∫–µ!*üïí {now}*Grow a Garden News. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è (https://t.me/GroowAGarden)*"
                        bot.send_message(chat_id=CHANNEL_ID, text=msg, parse_mode='Markdown')
                last_seen[iid] = qty
        time.sleep(60)

# Register handlers
dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CallbackQueryHandler(handle_stock, pattern='show_stock'))
dispatcher.add_handler(CallbackQueryHandler(handle_cosmetic, pattern='show_cosmetic'))
dispatcher.add_handler(CallbackQueryHandler(handle_weather, pattern='show_weather'))

# Start monitoring thread
th = threading.Thread(target=monitor_stock, daemon=True)
th.start()

# Start the bot
if __name__ == '__main__':
    updater.start_polling()
    updater.idle()